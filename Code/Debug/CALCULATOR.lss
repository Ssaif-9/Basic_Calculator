
CALCULATOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c9c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  00001c9c  00001d10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000c84  00000000  00000000  00001d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000001b6  00000000  00000000  000029e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  00002b98  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002078  00000000  00000000  00002d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000843  00000000  00000000  00004dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001298  00000000  00000000  00005613  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000062c  00000000  00000000  000068ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000077e  00000000  00000000  00006ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001f2e  00000000  00000000  00007656  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00009584  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 3a       	cpi	r26, 0xAA	; 170
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa ea       	ldi	r26, 0xAA	; 170
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3a       	cpi	r26, 0xAA	; 170
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6f 02 	call	0x4de	; 0x4de <main>
      8a:	0c 94 4c 0e 	jmp	0x1c98	; 0x1c98 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADD>:




void ADD(u32 FirstNumArr[], u32 SecondNumArr[],u8 FirstNumFlag,u8 SecondNumFlag, u32* Result)
{
      92:	2f 92       	push	r2
      94:	3f 92       	push	r3
      96:	4f 92       	push	r4
      98:	5f 92       	push	r5
      9a:	7f 92       	push	r7
      9c:	8f 92       	push	r8
      9e:	9f 92       	push	r9
      a0:	af 92       	push	r10
      a2:	bf 92       	push	r11
      a4:	cf 92       	push	r12
      a6:	df 92       	push	r13
      a8:	ef 92       	push	r14
      aa:	ff 92       	push	r15
      ac:	0f 93       	push	r16
      ae:	1f 93       	push	r17
      b0:	cf 93       	push	r28
      b2:	df 93       	push	r29
      b4:	2b 01       	movw	r4, r22
      b6:	d4 2f       	mov	r29, r20
      b8:	72 2e       	mov	r7, r18
      ba:	18 01       	movw	r2, r16
	u8 Index;
	u32 NUM1=FirstNumArr[0];
      bc:	fc 01       	movw	r30, r24
      be:	80 80       	ld	r8, Z
      c0:	91 80       	ldd	r9, Z+1	; 0x01
      c2:	a2 80       	ldd	r10, Z+2	; 0x02
      c4:	b3 80       	ldd	r11, Z+3	; 0x03
	u32 NUM2=SecondNumArr[0];
      c6:	fb 01       	movw	r30, r22
      c8:	c0 80       	ld	r12, Z
      ca:	d1 80       	ldd	r13, Z+1	; 0x01
      cc:	e2 80       	ldd	r14, Z+2	; 0x02
      ce:	f3 80       	ldd	r15, Z+3	; 0x03
	
	for(Index=1;Index<FirstNumFlag;Index++)
      d0:	42 30       	cpi	r20, 0x02	; 2
      d2:	e8 f0       	brcs	.+58     	; 0x10e <ADD+0x7c>
}




void ADD(u32 FirstNumArr[], u32 SecondNumArr[],u8 FirstNumFlag,u8 SecondNumFlag, u32* Result)
      d4:	8c 01       	movw	r16, r24
      d6:	0c 5f       	subi	r16, 0xFC	; 252
      d8:	1f 4f       	sbci	r17, 0xFF	; 255
{
	u8 Index;
	u32 NUM1=FirstNumArr[0];
	u32 NUM2=SecondNumArr[0];
	
	for(Index=1;Index<FirstNumFlag;Index++)
      da:	c1 e0       	ldi	r28, 0x01	; 1
	{
		NUM1 = NUM1*10 +FirstNumArr[Index];
      dc:	c5 01       	movw	r24, r10
      de:	b4 01       	movw	r22, r8
      e0:	2a e0       	ldi	r18, 0x0A	; 10
      e2:	30 e0       	ldi	r19, 0x00	; 0
      e4:	40 e0       	ldi	r20, 0x00	; 0
      e6:	50 e0       	ldi	r21, 0x00	; 0
      e8:	0e 94 26 0b 	call	0x164c	; 0x164c <__mulsi3>
      ec:	dc 01       	movw	r26, r24
      ee:	cb 01       	movw	r24, r22
      f0:	f8 01       	movw	r30, r16
      f2:	41 91       	ld	r20, Z+
      f4:	51 91       	ld	r21, Z+
      f6:	61 91       	ld	r22, Z+
      f8:	71 91       	ld	r23, Z+
      fa:	8f 01       	movw	r16, r30
      fc:	4a 01       	movw	r8, r20
      fe:	5b 01       	movw	r10, r22
     100:	88 0e       	add	r8, r24
     102:	99 1e       	adc	r9, r25
     104:	aa 1e       	adc	r10, r26
     106:	bb 1e       	adc	r11, r27
{
	u8 Index;
	u32 NUM1=FirstNumArr[0];
	u32 NUM2=SecondNumArr[0];
	
	for(Index=1;Index<FirstNumFlag;Index++)
     108:	cf 5f       	subi	r28, 0xFF	; 255
     10a:	cd 17       	cp	r28, r29
     10c:	39 f7       	brne	.-50     	; 0xdc <ADD+0x4a>
	{
		NUM1 = NUM1*10 +FirstNumArr[Index];
	}
	
	for(Index=1;Index<SecondNumFlag;Index++)
     10e:	f1 e0       	ldi	r31, 0x01	; 1
     110:	f7 15       	cp	r31, r7
     112:	e8 f4       	brcc	.+58     	; 0x14e <ADD+0xbc>
}




void ADD(u32 FirstNumArr[], u32 SecondNumArr[],u8 FirstNumFlag,u8 SecondNumFlag, u32* Result)
     114:	82 01       	movw	r16, r4
     116:	0c 5f       	subi	r16, 0xFC	; 252
     118:	1f 4f       	sbci	r17, 0xFF	; 255
     11a:	c1 e0       	ldi	r28, 0x01	; 1
		NUM1 = NUM1*10 +FirstNumArr[Index];
	}
	
	for(Index=1;Index<SecondNumFlag;Index++)
	{
		NUM2 = NUM2*10 +SecondNumArr[Index];
     11c:	c7 01       	movw	r24, r14
     11e:	b6 01       	movw	r22, r12
     120:	2a e0       	ldi	r18, 0x0A	; 10
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	40 e0       	ldi	r20, 0x00	; 0
     126:	50 e0       	ldi	r21, 0x00	; 0
     128:	0e 94 26 0b 	call	0x164c	; 0x164c <__mulsi3>
     12c:	dc 01       	movw	r26, r24
     12e:	cb 01       	movw	r24, r22
     130:	f8 01       	movw	r30, r16
     132:	41 91       	ld	r20, Z+
     134:	51 91       	ld	r21, Z+
     136:	61 91       	ld	r22, Z+
     138:	71 91       	ld	r23, Z+
     13a:	8f 01       	movw	r16, r30
     13c:	6a 01       	movw	r12, r20
     13e:	7b 01       	movw	r14, r22
     140:	c8 0e       	add	r12, r24
     142:	d9 1e       	adc	r13, r25
     144:	ea 1e       	adc	r14, r26
     146:	fb 1e       	adc	r15, r27
	for(Index=1;Index<FirstNumFlag;Index++)
	{
		NUM1 = NUM1*10 +FirstNumArr[Index];
	}
	
	for(Index=1;Index<SecondNumFlag;Index++)
     148:	cf 5f       	subi	r28, 0xFF	; 255
     14a:	c7 15       	cp	r28, r7
     14c:	39 f7       	brne	.-50     	; 0x11c <ADD+0x8a>
	{
		NUM2 = NUM2*10 +SecondNumArr[Index];
	}
	
	
	*Result = (NUM1 + NUM2) ;
     14e:	d7 01       	movw	r26, r14
     150:	c6 01       	movw	r24, r12
     152:	88 0d       	add	r24, r8
     154:	99 1d       	adc	r25, r9
     156:	aa 1d       	adc	r26, r10
     158:	bb 1d       	adc	r27, r11
     15a:	f1 01       	movw	r30, r2
     15c:	80 83       	st	Z, r24
     15e:	91 83       	std	Z+1, r25	; 0x01
     160:	a2 83       	std	Z+2, r26	; 0x02
     162:	b3 83       	std	Z+3, r27	; 0x03
	LCD_SendIntegarNumber(*Result);
     164:	0e 94 31 09 	call	0x1262	; 0x1262 <LCD_SendIntegarNumber>
}
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	1f 91       	pop	r17
     16e:	0f 91       	pop	r16
     170:	ff 90       	pop	r15
     172:	ef 90       	pop	r14
     174:	df 90       	pop	r13
     176:	cf 90       	pop	r12
     178:	bf 90       	pop	r11
     17a:	af 90       	pop	r10
     17c:	9f 90       	pop	r9
     17e:	8f 90       	pop	r8
     180:	7f 90       	pop	r7
     182:	5f 90       	pop	r5
     184:	4f 90       	pop	r4
     186:	3f 90       	pop	r3
     188:	2f 90       	pop	r2
     18a:	08 95       	ret

0000018c <SUB>:

void SUB(u32 FirstNumArr[], u32 SecondNumArr[],u8 FirstNumFlag,u8 SecondNumFlag, u32* Result)
{
     18c:	2f 92       	push	r2
     18e:	3f 92       	push	r3
     190:	4f 92       	push	r4
     192:	5f 92       	push	r5
     194:	7f 92       	push	r7
     196:	8f 92       	push	r8
     198:	9f 92       	push	r9
     19a:	af 92       	push	r10
     19c:	bf 92       	push	r11
     19e:	cf 92       	push	r12
     1a0:	df 92       	push	r13
     1a2:	ef 92       	push	r14
     1a4:	ff 92       	push	r15
     1a6:	0f 93       	push	r16
     1a8:	1f 93       	push	r17
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	2b 01       	movw	r4, r22
     1b0:	d4 2f       	mov	r29, r20
     1b2:	72 2e       	mov	r7, r18
     1b4:	18 01       	movw	r2, r16
	u8 Index;
	u32 NUM1=FirstNumArr[0];
     1b6:	fc 01       	movw	r30, r24
     1b8:	c0 80       	ld	r12, Z
     1ba:	d1 80       	ldd	r13, Z+1	; 0x01
     1bc:	e2 80       	ldd	r14, Z+2	; 0x02
     1be:	f3 80       	ldd	r15, Z+3	; 0x03
	u32 NUM2=SecondNumArr[0];
     1c0:	fb 01       	movw	r30, r22
     1c2:	80 80       	ld	r8, Z
     1c4:	91 80       	ldd	r9, Z+1	; 0x01
     1c6:	a2 80       	ldd	r10, Z+2	; 0x02
     1c8:	b3 80       	ldd	r11, Z+3	; 0x03
	
	for(Index=1;Index<FirstNumFlag;Index++)
     1ca:	42 30       	cpi	r20, 0x02	; 2
     1cc:	e8 f0       	brcs	.+58     	; 0x208 <SUB+0x7c>
	
	*Result = (NUM1 + NUM2) ;
	LCD_SendIntegarNumber(*Result);
}

void SUB(u32 FirstNumArr[], u32 SecondNumArr[],u8 FirstNumFlag,u8 SecondNumFlag, u32* Result)
     1ce:	8c 01       	movw	r16, r24
     1d0:	0c 5f       	subi	r16, 0xFC	; 252
     1d2:	1f 4f       	sbci	r17, 0xFF	; 255
{
	u8 Index;
	u32 NUM1=FirstNumArr[0];
	u32 NUM2=SecondNumArr[0];
	
	for(Index=1;Index<FirstNumFlag;Index++)
     1d4:	c1 e0       	ldi	r28, 0x01	; 1
	{
		NUM1 = NUM1*10 +FirstNumArr[Index];
     1d6:	c7 01       	movw	r24, r14
     1d8:	b6 01       	movw	r22, r12
     1da:	2a e0       	ldi	r18, 0x0A	; 10
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	40 e0       	ldi	r20, 0x00	; 0
     1e0:	50 e0       	ldi	r21, 0x00	; 0
     1e2:	0e 94 26 0b 	call	0x164c	; 0x164c <__mulsi3>
     1e6:	dc 01       	movw	r26, r24
     1e8:	cb 01       	movw	r24, r22
     1ea:	f8 01       	movw	r30, r16
     1ec:	41 91       	ld	r20, Z+
     1ee:	51 91       	ld	r21, Z+
     1f0:	61 91       	ld	r22, Z+
     1f2:	71 91       	ld	r23, Z+
     1f4:	8f 01       	movw	r16, r30
     1f6:	6a 01       	movw	r12, r20
     1f8:	7b 01       	movw	r14, r22
     1fa:	c8 0e       	add	r12, r24
     1fc:	d9 1e       	adc	r13, r25
     1fe:	ea 1e       	adc	r14, r26
     200:	fb 1e       	adc	r15, r27
{
	u8 Index;
	u32 NUM1=FirstNumArr[0];
	u32 NUM2=SecondNumArr[0];
	
	for(Index=1;Index<FirstNumFlag;Index++)
     202:	cf 5f       	subi	r28, 0xFF	; 255
     204:	cd 17       	cp	r28, r29
     206:	39 f7       	brne	.-50     	; 0x1d6 <SUB+0x4a>
	{
		NUM1 = NUM1*10 +FirstNumArr[Index];
	}
	
	for(Index=1;Index<SecondNumFlag;Index++)
     208:	f1 e0       	ldi	r31, 0x01	; 1
     20a:	f7 15       	cp	r31, r7
     20c:	e8 f4       	brcc	.+58     	; 0x248 <SUB+0xbc>
	
	*Result = (NUM1 + NUM2) ;
	LCD_SendIntegarNumber(*Result);
}

void SUB(u32 FirstNumArr[], u32 SecondNumArr[],u8 FirstNumFlag,u8 SecondNumFlag, u32* Result)
     20e:	82 01       	movw	r16, r4
     210:	0c 5f       	subi	r16, 0xFC	; 252
     212:	1f 4f       	sbci	r17, 0xFF	; 255
     214:	c1 e0       	ldi	r28, 0x01	; 1
		NUM1 = NUM1*10 +FirstNumArr[Index];
	}
	
	for(Index=1;Index<SecondNumFlag;Index++)
	{
		NUM2 = NUM2*10 +SecondNumArr[Index];
     216:	c5 01       	movw	r24, r10
     218:	b4 01       	movw	r22, r8
     21a:	2a e0       	ldi	r18, 0x0A	; 10
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	40 e0       	ldi	r20, 0x00	; 0
     220:	50 e0       	ldi	r21, 0x00	; 0
     222:	0e 94 26 0b 	call	0x164c	; 0x164c <__mulsi3>
     226:	dc 01       	movw	r26, r24
     228:	cb 01       	movw	r24, r22
     22a:	f8 01       	movw	r30, r16
     22c:	41 91       	ld	r20, Z+
     22e:	51 91       	ld	r21, Z+
     230:	61 91       	ld	r22, Z+
     232:	71 91       	ld	r23, Z+
     234:	8f 01       	movw	r16, r30
     236:	4a 01       	movw	r8, r20
     238:	5b 01       	movw	r10, r22
     23a:	88 0e       	add	r8, r24
     23c:	99 1e       	adc	r9, r25
     23e:	aa 1e       	adc	r10, r26
     240:	bb 1e       	adc	r11, r27
	for(Index=1;Index<FirstNumFlag;Index++)
	{
		NUM1 = NUM1*10 +FirstNumArr[Index];
	}
	
	for(Index=1;Index<SecondNumFlag;Index++)
     242:	cf 5f       	subi	r28, 0xFF	; 255
     244:	c7 15       	cp	r28, r7
     246:	39 f7       	brne	.-50     	; 0x216 <SUB+0x8a>
	{
		NUM2 = NUM2*10 +SecondNumArr[Index];
	}
	
	if(NUM2 > NUM1)
     248:	c8 14       	cp	r12, r8
     24a:	d9 04       	cpc	r13, r9
     24c:	ea 04       	cpc	r14, r10
     24e:	fb 04       	cpc	r15, r11
     250:	90 f4       	brcc	.+36     	; 0x276 <SUB+0xea>
	{
		*Result = (NUM2 - NUM1) ;
     252:	8c 18       	sub	r8, r12
     254:	9d 08       	sbc	r9, r13
     256:	ae 08       	sbc	r10, r14
     258:	bf 08       	sbc	r11, r15
     25a:	f1 01       	movw	r30, r2
     25c:	80 82       	st	Z, r8
     25e:	91 82       	std	Z+1, r9	; 0x01
     260:	a2 82       	std	Z+2, r10	; 0x02
     262:	b3 82       	std	Z+3, r11	; 0x03
		LCD_sendChar('-');
     264:	8d e2       	ldi	r24, 0x2D	; 45
     266:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_sendChar>
		LCD_SendIntegarNumber(*Result);
     26a:	f1 01       	movw	r30, r2
     26c:	80 81       	ld	r24, Z
     26e:	91 81       	ldd	r25, Z+1	; 0x01
     270:	0e 94 31 09 	call	0x1262	; 0x1262 <LCD_SendIntegarNumber>
     274:	0d c0       	rjmp	.+26     	; 0x290 <SUB+0x104>
	}
	else
	{
		*Result = (NUM1 - NUM2) ;
     276:	d7 01       	movw	r26, r14
     278:	c6 01       	movw	r24, r12
     27a:	88 19       	sub	r24, r8
     27c:	99 09       	sbc	r25, r9
     27e:	aa 09       	sbc	r26, r10
     280:	bb 09       	sbc	r27, r11
     282:	f1 01       	movw	r30, r2
     284:	80 83       	st	Z, r24
     286:	91 83       	std	Z+1, r25	; 0x01
     288:	a2 83       	std	Z+2, r26	; 0x02
     28a:	b3 83       	std	Z+3, r27	; 0x03
		LCD_SendIntegarNumber(*Result);
     28c:	0e 94 31 09 	call	0x1262	; 0x1262 <LCD_SendIntegarNumber>
	}
}
     290:	df 91       	pop	r29
     292:	cf 91       	pop	r28
     294:	1f 91       	pop	r17
     296:	0f 91       	pop	r16
     298:	ff 90       	pop	r15
     29a:	ef 90       	pop	r14
     29c:	df 90       	pop	r13
     29e:	cf 90       	pop	r12
     2a0:	bf 90       	pop	r11
     2a2:	af 90       	pop	r10
     2a4:	9f 90       	pop	r9
     2a6:	8f 90       	pop	r8
     2a8:	7f 90       	pop	r7
     2aa:	5f 90       	pop	r5
     2ac:	4f 90       	pop	r4
     2ae:	3f 90       	pop	r3
     2b0:	2f 90       	pop	r2
     2b2:	08 95       	ret

000002b4 <MUL>:

void MUL(u32 FirstNumArr[], u32 SecondNumArr[],u8 FirstNumFlag,u8 SecondNumFlag, u32* Result)
{
     2b4:	2f 92       	push	r2
     2b6:	3f 92       	push	r3
     2b8:	4f 92       	push	r4
     2ba:	5f 92       	push	r5
     2bc:	7f 92       	push	r7
     2be:	8f 92       	push	r8
     2c0:	9f 92       	push	r9
     2c2:	af 92       	push	r10
     2c4:	bf 92       	push	r11
     2c6:	cf 92       	push	r12
     2c8:	df 92       	push	r13
     2ca:	ef 92       	push	r14
     2cc:	ff 92       	push	r15
     2ce:	0f 93       	push	r16
     2d0:	1f 93       	push	r17
     2d2:	cf 93       	push	r28
     2d4:	df 93       	push	r29
     2d6:	2b 01       	movw	r4, r22
     2d8:	d4 2f       	mov	r29, r20
     2da:	72 2e       	mov	r7, r18
     2dc:	18 01       	movw	r2, r16
	u8 Index;
	u32 NUM1=FirstNumArr[0];
     2de:	fc 01       	movw	r30, r24
     2e0:	80 80       	ld	r8, Z
     2e2:	91 80       	ldd	r9, Z+1	; 0x01
     2e4:	a2 80       	ldd	r10, Z+2	; 0x02
     2e6:	b3 80       	ldd	r11, Z+3	; 0x03
	u32 NUM2=SecondNumArr[0];
     2e8:	fb 01       	movw	r30, r22
     2ea:	c0 80       	ld	r12, Z
     2ec:	d1 80       	ldd	r13, Z+1	; 0x01
     2ee:	e2 80       	ldd	r14, Z+2	; 0x02
     2f0:	f3 80       	ldd	r15, Z+3	; 0x03
	
	for(Index=1;Index<FirstNumFlag;Index++)
     2f2:	42 30       	cpi	r20, 0x02	; 2
     2f4:	e8 f0       	brcs	.+58     	; 0x330 <MUL+0x7c>
		*Result = (NUM1 - NUM2) ;
		LCD_SendIntegarNumber(*Result);
	}
}

void MUL(u32 FirstNumArr[], u32 SecondNumArr[],u8 FirstNumFlag,u8 SecondNumFlag, u32* Result)
     2f6:	8c 01       	movw	r16, r24
     2f8:	0c 5f       	subi	r16, 0xFC	; 252
     2fa:	1f 4f       	sbci	r17, 0xFF	; 255
{
	u8 Index;
	u32 NUM1=FirstNumArr[0];
	u32 NUM2=SecondNumArr[0];
	
	for(Index=1;Index<FirstNumFlag;Index++)
     2fc:	c1 e0       	ldi	r28, 0x01	; 1
	{
		NUM1 = NUM1*10 +FirstNumArr[Index];
     2fe:	c5 01       	movw	r24, r10
     300:	b4 01       	movw	r22, r8
     302:	2a e0       	ldi	r18, 0x0A	; 10
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	40 e0       	ldi	r20, 0x00	; 0
     308:	50 e0       	ldi	r21, 0x00	; 0
     30a:	0e 94 26 0b 	call	0x164c	; 0x164c <__mulsi3>
     30e:	dc 01       	movw	r26, r24
     310:	cb 01       	movw	r24, r22
     312:	f8 01       	movw	r30, r16
     314:	41 91       	ld	r20, Z+
     316:	51 91       	ld	r21, Z+
     318:	61 91       	ld	r22, Z+
     31a:	71 91       	ld	r23, Z+
     31c:	8f 01       	movw	r16, r30
     31e:	4a 01       	movw	r8, r20
     320:	5b 01       	movw	r10, r22
     322:	88 0e       	add	r8, r24
     324:	99 1e       	adc	r9, r25
     326:	aa 1e       	adc	r10, r26
     328:	bb 1e       	adc	r11, r27
{
	u8 Index;
	u32 NUM1=FirstNumArr[0];
	u32 NUM2=SecondNumArr[0];
	
	for(Index=1;Index<FirstNumFlag;Index++)
     32a:	cf 5f       	subi	r28, 0xFF	; 255
     32c:	cd 17       	cp	r28, r29
     32e:	39 f7       	brne	.-50     	; 0x2fe <MUL+0x4a>
	{
		NUM1 = NUM1*10 +FirstNumArr[Index];
	}
	
	for(Index=1;Index<SecondNumFlag;Index++)
     330:	f1 e0       	ldi	r31, 0x01	; 1
     332:	f7 15       	cp	r31, r7
     334:	e8 f4       	brcc	.+58     	; 0x370 <MUL+0xbc>
		*Result = (NUM1 - NUM2) ;
		LCD_SendIntegarNumber(*Result);
	}
}

void MUL(u32 FirstNumArr[], u32 SecondNumArr[],u8 FirstNumFlag,u8 SecondNumFlag, u32* Result)
     336:	82 01       	movw	r16, r4
     338:	0c 5f       	subi	r16, 0xFC	; 252
     33a:	1f 4f       	sbci	r17, 0xFF	; 255
     33c:	c1 e0       	ldi	r28, 0x01	; 1
		NUM1 = NUM1*10 +FirstNumArr[Index];
	}
	
	for(Index=1;Index<SecondNumFlag;Index++)
	{
		NUM2 = NUM2*10 +SecondNumArr[Index];
     33e:	c7 01       	movw	r24, r14
     340:	b6 01       	movw	r22, r12
     342:	2a e0       	ldi	r18, 0x0A	; 10
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	40 e0       	ldi	r20, 0x00	; 0
     348:	50 e0       	ldi	r21, 0x00	; 0
     34a:	0e 94 26 0b 	call	0x164c	; 0x164c <__mulsi3>
     34e:	dc 01       	movw	r26, r24
     350:	cb 01       	movw	r24, r22
     352:	f8 01       	movw	r30, r16
     354:	41 91       	ld	r20, Z+
     356:	51 91       	ld	r21, Z+
     358:	61 91       	ld	r22, Z+
     35a:	71 91       	ld	r23, Z+
     35c:	8f 01       	movw	r16, r30
     35e:	6a 01       	movw	r12, r20
     360:	7b 01       	movw	r14, r22
     362:	c8 0e       	add	r12, r24
     364:	d9 1e       	adc	r13, r25
     366:	ea 1e       	adc	r14, r26
     368:	fb 1e       	adc	r15, r27
	for(Index=1;Index<FirstNumFlag;Index++)
	{
		NUM1 = NUM1*10 +FirstNumArr[Index];
	}
	
	for(Index=1;Index<SecondNumFlag;Index++)
     36a:	cf 5f       	subi	r28, 0xFF	; 255
     36c:	c7 15       	cp	r28, r7
     36e:	39 f7       	brne	.-50     	; 0x33e <MUL+0x8a>
	{
		NUM2 = NUM2*10 +SecondNumArr[Index];
	}
	*Result = (NUM1 * NUM2) ;
     370:	c7 01       	movw	r24, r14
     372:	b6 01       	movw	r22, r12
     374:	a5 01       	movw	r20, r10
     376:	94 01       	movw	r18, r8
     378:	0e 94 26 0b 	call	0x164c	; 0x164c <__mulsi3>
     37c:	dc 01       	movw	r26, r24
     37e:	cb 01       	movw	r24, r22
     380:	f1 01       	movw	r30, r2
     382:	80 83       	st	Z, r24
     384:	91 83       	std	Z+1, r25	; 0x01
     386:	a2 83       	std	Z+2, r26	; 0x02
     388:	b3 83       	std	Z+3, r27	; 0x03
	LCD_SendIntegarNumber(*Result);
     38a:	0e 94 31 09 	call	0x1262	; 0x1262 <LCD_SendIntegarNumber>
}
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	1f 91       	pop	r17
     394:	0f 91       	pop	r16
     396:	ff 90       	pop	r15
     398:	ef 90       	pop	r14
     39a:	df 90       	pop	r13
     39c:	cf 90       	pop	r12
     39e:	bf 90       	pop	r11
     3a0:	af 90       	pop	r10
     3a2:	9f 90       	pop	r9
     3a4:	8f 90       	pop	r8
     3a6:	7f 90       	pop	r7
     3a8:	5f 90       	pop	r5
     3aa:	4f 90       	pop	r4
     3ac:	3f 90       	pop	r3
     3ae:	2f 90       	pop	r2
     3b0:	08 95       	ret

000003b2 <DIV>:

void DIV(u32 FirstNumArr[], u32 SecondNumArr[],u8 FirstNumFlag,u8 SecondNumFlag, u32* Result)
{
     3b2:	2f 92       	push	r2
     3b4:	3f 92       	push	r3
     3b6:	4f 92       	push	r4
     3b8:	5f 92       	push	r5
     3ba:	7f 92       	push	r7
     3bc:	8f 92       	push	r8
     3be:	9f 92       	push	r9
     3c0:	af 92       	push	r10
     3c2:	bf 92       	push	r11
     3c4:	cf 92       	push	r12
     3c6:	df 92       	push	r13
     3c8:	ef 92       	push	r14
     3ca:	ff 92       	push	r15
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	2b 01       	movw	r4, r22
     3d6:	d4 2f       	mov	r29, r20
     3d8:	72 2e       	mov	r7, r18
     3da:	18 01       	movw	r2, r16
	u8 Index;
	u32 NUM1=FirstNumArr[0];
     3dc:	fc 01       	movw	r30, r24
     3de:	80 80       	ld	r8, Z
     3e0:	91 80       	ldd	r9, Z+1	; 0x01
     3e2:	a2 80       	ldd	r10, Z+2	; 0x02
     3e4:	b3 80       	ldd	r11, Z+3	; 0x03
	u32 NUM2=SecondNumArr[0];
     3e6:	fb 01       	movw	r30, r22
     3e8:	c0 80       	ld	r12, Z
     3ea:	d1 80       	ldd	r13, Z+1	; 0x01
     3ec:	e2 80       	ldd	r14, Z+2	; 0x02
     3ee:	f3 80       	ldd	r15, Z+3	; 0x03
	
	for(Index=1;Index<FirstNumFlag;Index++)
     3f0:	42 30       	cpi	r20, 0x02	; 2
     3f2:	e8 f0       	brcs	.+58     	; 0x42e <DIV+0x7c>
	}
	*Result = (NUM1 * NUM2) ;
	LCD_SendIntegarNumber(*Result);
}

void DIV(u32 FirstNumArr[], u32 SecondNumArr[],u8 FirstNumFlag,u8 SecondNumFlag, u32* Result)
     3f4:	8c 01       	movw	r16, r24
     3f6:	0c 5f       	subi	r16, 0xFC	; 252
     3f8:	1f 4f       	sbci	r17, 0xFF	; 255
{
	u8 Index;
	u32 NUM1=FirstNumArr[0];
	u32 NUM2=SecondNumArr[0];
	
	for(Index=1;Index<FirstNumFlag;Index++)
     3fa:	c1 e0       	ldi	r28, 0x01	; 1
	{
		NUM1 = NUM1*10 +FirstNumArr[Index];
     3fc:	c5 01       	movw	r24, r10
     3fe:	b4 01       	movw	r22, r8
     400:	2a e0       	ldi	r18, 0x0A	; 10
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	40 e0       	ldi	r20, 0x00	; 0
     406:	50 e0       	ldi	r21, 0x00	; 0
     408:	0e 94 26 0b 	call	0x164c	; 0x164c <__mulsi3>
     40c:	dc 01       	movw	r26, r24
     40e:	cb 01       	movw	r24, r22
     410:	f8 01       	movw	r30, r16
     412:	41 91       	ld	r20, Z+
     414:	51 91       	ld	r21, Z+
     416:	61 91       	ld	r22, Z+
     418:	71 91       	ld	r23, Z+
     41a:	8f 01       	movw	r16, r30
     41c:	4a 01       	movw	r8, r20
     41e:	5b 01       	movw	r10, r22
     420:	88 0e       	add	r8, r24
     422:	99 1e       	adc	r9, r25
     424:	aa 1e       	adc	r10, r26
     426:	bb 1e       	adc	r11, r27
{
	u8 Index;
	u32 NUM1=FirstNumArr[0];
	u32 NUM2=SecondNumArr[0];
	
	for(Index=1;Index<FirstNumFlag;Index++)
     428:	cf 5f       	subi	r28, 0xFF	; 255
     42a:	cd 17       	cp	r28, r29
     42c:	39 f7       	brne	.-50     	; 0x3fc <DIV+0x4a>
	{
		NUM1 = NUM1*10 +FirstNumArr[Index];
	}
	for(Index=1;Index<SecondNumFlag;Index++)
     42e:	f1 e0       	ldi	r31, 0x01	; 1
     430:	f7 15       	cp	r31, r7
     432:	e8 f4       	brcc	.+58     	; 0x46e <DIV+0xbc>
	}
	*Result = (NUM1 * NUM2) ;
	LCD_SendIntegarNumber(*Result);
}

void DIV(u32 FirstNumArr[], u32 SecondNumArr[],u8 FirstNumFlag,u8 SecondNumFlag, u32* Result)
     434:	82 01       	movw	r16, r4
     436:	0c 5f       	subi	r16, 0xFC	; 252
     438:	1f 4f       	sbci	r17, 0xFF	; 255
     43a:	c1 e0       	ldi	r28, 0x01	; 1
	{
		NUM1 = NUM1*10 +FirstNumArr[Index];
	}
	for(Index=1;Index<SecondNumFlag;Index++)
	{
		NUM2 = NUM2*10 +SecondNumArr[Index];
     43c:	c7 01       	movw	r24, r14
     43e:	b6 01       	movw	r22, r12
     440:	2a e0       	ldi	r18, 0x0A	; 10
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	40 e0       	ldi	r20, 0x00	; 0
     446:	50 e0       	ldi	r21, 0x00	; 0
     448:	0e 94 26 0b 	call	0x164c	; 0x164c <__mulsi3>
     44c:	dc 01       	movw	r26, r24
     44e:	cb 01       	movw	r24, r22
     450:	f8 01       	movw	r30, r16
     452:	41 91       	ld	r20, Z+
     454:	51 91       	ld	r21, Z+
     456:	61 91       	ld	r22, Z+
     458:	71 91       	ld	r23, Z+
     45a:	8f 01       	movw	r16, r30
     45c:	6a 01       	movw	r12, r20
     45e:	7b 01       	movw	r14, r22
     460:	c8 0e       	add	r12, r24
     462:	d9 1e       	adc	r13, r25
     464:	ea 1e       	adc	r14, r26
     466:	fb 1e       	adc	r15, r27
	
	for(Index=1;Index<FirstNumFlag;Index++)
	{
		NUM1 = NUM1*10 +FirstNumArr[Index];
	}
	for(Index=1;Index<SecondNumFlag;Index++)
     468:	cf 5f       	subi	r28, 0xFF	; 255
     46a:	c7 15       	cp	r28, r7
     46c:	39 f7       	brne	.-50     	; 0x43c <DIV+0x8a>
	{
		NUM2 = NUM2*10 +SecondNumArr[Index];
	}
	
	if (0 == NUM2)
     46e:	c1 14       	cp	r12, r1
     470:	d1 04       	cpc	r13, r1
     472:	e1 04       	cpc	r14, r1
     474:	f1 04       	cpc	r15, r1
     476:	91 f4       	brne	.+36     	; 0x49c <DIV+0xea>
	{
		LCD_ClearDesplay();
     478:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_ClearDesplay>
		LCD_SendString("Division ERROR/0");
     47c:	80 e6       	ldi	r24, 0x60	; 96
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <LCD_SendString>
		LCD_sendComnd(LCD_GO_TO_2ND_LINE);
     484:	80 ec       	ldi	r24, 0xC0	; 192
     486:	0e 94 21 08 	call	0x1042	; 0x1042 <LCD_sendComnd>
		LCD_GOTO_LOCATION(5,2);
     48a:	85 e0       	ldi	r24, 0x05	; 5
     48c:	62 e0       	ldi	r22, 0x02	; 2
     48e:	0e 94 0e 09 	call	0x121c	; 0x121c <LCD_GOTO_LOCATION>
		LCD_SendString("# Reset");
     492:	81 e7       	ldi	r24, 0x71	; 113
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <LCD_SendString>
     49a:	0f c0       	rjmp	.+30     	; 0x4ba <DIV+0x108>
	}	
	else
	{
		*Result = (NUM1 / NUM2) ;
     49c:	c5 01       	movw	r24, r10
     49e:	b4 01       	movw	r22, r8
     4a0:	a7 01       	movw	r20, r14
     4a2:	96 01       	movw	r18, r12
     4a4:	0e 94 45 0b 	call	0x168a	; 0x168a <__udivmodsi4>
     4a8:	f1 01       	movw	r30, r2
     4aa:	20 83       	st	Z, r18
     4ac:	31 83       	std	Z+1, r19	; 0x01
     4ae:	42 83       	std	Z+2, r20	; 0x02
     4b0:	53 83       	std	Z+3, r21	; 0x03
		LCD_SendIntegarNumber(*Result);
     4b2:	82 2f       	mov	r24, r18
     4b4:	93 2f       	mov	r25, r19
     4b6:	0e 94 31 09 	call	0x1262	; 0x1262 <LCD_SendIntegarNumber>
	}
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	1f 91       	pop	r17
     4c0:	0f 91       	pop	r16
     4c2:	ff 90       	pop	r15
     4c4:	ef 90       	pop	r14
     4c6:	df 90       	pop	r13
     4c8:	cf 90       	pop	r12
     4ca:	bf 90       	pop	r11
     4cc:	af 90       	pop	r10
     4ce:	9f 90       	pop	r9
     4d0:	8f 90       	pop	r8
     4d2:	7f 90       	pop	r7
     4d4:	5f 90       	pop	r5
     4d6:	4f 90       	pop	r4
     4d8:	3f 90       	pop	r3
     4da:	2f 90       	pop	r2
     4dc:	08 95       	ret

000004de <main>:
void MUL(u32 FirstNumArr[], u32 SecondNumArr[],u8 FirstNumFlag,u8 SecondNumFlag, u32* Result);
void DIV(u32 FirstNumArr[], u32 SecondNumArr[],u8 FirstNumFlag,u8 SecondNumFlag, u32* Result);


int main(void)
{
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
     4e2:	cd b7       	in	r28, 0x3d	; 61
     4e4:	de b7       	in	r29, 0x3e	; 62
     4e6:	a8 97       	sbiw	r28, 0x28	; 40
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	de bf       	out	0x3e, r29	; 62
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	cd bf       	out	0x3d, r28	; 61
	u32 FirstNumArr[4],SecondNumArr[4];
	u32 KeypadValue;
	
	u8 FirstNumFlag,OperatorFlag,SecondNumFlag,EqualFlag = 0 ;
	
	LCD_init();
     4f2:	0e 94 57 08 	call	0x10ae	; 0x10ae <LCD_init>
	KEYPAD_init();
     4f6:	0e 94 cc 06 	call	0xd98	; 0xd98 <KEYPAD_init>
	
	LCD_GOTO_LOCATION(5,1);
     4fa:	85 e0       	ldi	r24, 0x05	; 5
     4fc:	61 e0       	ldi	r22, 0x01	; 1
     4fe:	0e 94 0e 09 	call	0x121c	; 0x121c <LCD_GOTO_LOCATION>
	LCD_SendString("WELCOME!");
     502:	89 e7       	ldi	r24, 0x79	; 121
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <LCD_SendString>
	LCD_sendComnd(LCD_GO_TO_2ND_LINE);
     50a:	80 ec       	ldi	r24, 0xC0	; 192
     50c:	0e 94 21 08 	call	0x1042	; 0x1042 <LCD_sendComnd>
	LCD_SendString(" +-/*CALCOLATOR ");
     510:	82 e8       	ldi	r24, 0x82	; 130
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <LCD_SendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     518:	8f ef       	ldi	r24, 0xFF	; 255
     51a:	93 ed       	ldi	r25, 0xD3	; 211
     51c:	a0 e3       	ldi	r26, 0x30	; 48
     51e:	81 50       	subi	r24, 0x01	; 1
     520:	90 40       	sbci	r25, 0x00	; 0
     522:	a0 40       	sbci	r26, 0x00	; 0
     524:	e1 f7       	brne	.-8      	; 0x51e <main+0x40>
     526:	00 c0       	rjmp	.+0      	; 0x528 <main+0x4a>
     528:	00 00       	nop
	_delay_ms(1000);
	LCD_ClearDesplay();
     52a:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_ClearDesplay>
	LCD_sendComnd(LCD_GO_TO_2ND_LINE);
     52e:	80 ec       	ldi	r24, 0xC0	; 192
     530:	0e 94 21 08 	call	0x1042	; 0x1042 <LCD_sendComnd>
	LCD_GOTO_LOCATION(5,2);
     534:	85 e0       	ldi	r24, 0x05	; 5
     536:	62 e0       	ldi	r22, 0x02	; 2
     538:	0e 94 0e 09 	call	0x121c	; 0x121c <LCD_GOTO_LOCATION>
	LCD_SendString("# Reset");
     53c:	81 e7       	ldi	r24, 0x71	; 113
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <LCD_SendString>
	LCD_sendComnd(LCD_GO_TO_1ND_LINE);
     544:	82 e0       	ldi	r24, 0x02	; 2
     546:	0e 94 21 08 	call	0x1042	; 0x1042 <LCD_sendComnd>
	u32 FirstNum , SecondNum ;
	u32 Result;
	u32 FirstNumArr[4],SecondNumArr[4];
	u32 KeypadValue;
	
	u8 FirstNumFlag,OperatorFlag,SecondNumFlag,EqualFlag = 0 ;
     54a:	10 e0       	ldi	r17, 0x00	; 0
					 LCD_ClearDesplay();
					 LCD_sendComnd(LCD_GO_TO_2ND_LINE);
					 LCD_GOTO_LOCATION(5,2);
					 LCD_SendString("# Reset");
					 LCD_sendComnd(LCD_GO_TO_1ND_LINE);
					 FirstNumFlag=SecondNumFlag=OperatorFlag=EqualFlag=0;
     54c:	aa 24       	eor	r10, r10
			 }
			
			 if (KeypadValue == '=' && FirstNumFlag != 0 && OperatorFlag == 1  && SecondNumFlag != 0 && EqualFlag == 0)
			 {
				 Equal=KeypadValue;
				 EqualFlag = 1 ;
     54e:	cc 24       	eor	r12, r12
     550:	c3 94       	inc	r12
	LCD_GOTO_LOCATION(5,2);
	LCD_SendString("# Reset");
	LCD_sendComnd(LCD_GO_TO_1ND_LINE);
	while(1)
	{
		KEYPAD_GetValue(&KeypadValue);
     552:	ce 01       	movw	r24, r28
     554:	85 96       	adiw	r24, 0x25	; 37
     556:	0e 94 19 07 	call	0xe32	; 0xe32 <KEYPAD_GetValue>
		if (KEYPAD_NOT_PRESSED != KeypadValue )
     55a:	8d a1       	lds	r24, 0x4d
     55c:	9e a1       	lds	r25, 0x4e
     55e:	af a1       	lds	r26, 0x4f
     560:	b8 a5       	lds	r27, 0x68
     562:	8f 3f       	cpi	r24, 0xFF	; 255
     564:	91 05       	cpc	r25, r1
     566:	a1 05       	cpc	r26, r1
     568:	b1 05       	cpc	r27, r1
     56a:	99 f3       	breq	.-26     	; 0x552 <main+0x74>
		{
			if (KeypadValue != '+' && KeypadValue != '-' && KeypadValue != '*' && KeypadValue != '/' && KeypadValue != '=' && KeypadValue != '#' && FirstNumFlag != 4 &&  OperatorFlag == 0 &&  SecondNumFlag == 0 && EqualFlag == 0  )
     56c:	8b 32       	cpi	r24, 0x2B	; 43
     56e:	91 05       	cpc	r25, r1
     570:	a1 05       	cpc	r26, r1
     572:	b1 05       	cpc	r27, r1
     574:	a9 f1       	breq	.+106    	; 0x5e0 <main+0x102>
     576:	8d 32       	cpi	r24, 0x2D	; 45
     578:	91 05       	cpc	r25, r1
     57a:	a1 05       	cpc	r26, r1
     57c:	b1 05       	cpc	r27, r1
     57e:	81 f1       	breq	.+96     	; 0x5e0 <main+0x102>
     580:	8a 32       	cpi	r24, 0x2A	; 42
     582:	91 05       	cpc	r25, r1
     584:	a1 05       	cpc	r26, r1
     586:	b1 05       	cpc	r27, r1
     588:	59 f1       	breq	.+86     	; 0x5e0 <main+0x102>
     58a:	8f 32       	cpi	r24, 0x2F	; 47
     58c:	91 05       	cpc	r25, r1
     58e:	a1 05       	cpc	r26, r1
     590:	b1 05       	cpc	r27, r1
     592:	31 f1       	breq	.+76     	; 0x5e0 <main+0x102>
     594:	8d 33       	cpi	r24, 0x3D	; 61
     596:	91 05       	cpc	r25, r1
     598:	a1 05       	cpc	r26, r1
     59a:	b1 05       	cpc	r27, r1
     59c:	09 f1       	breq	.+66     	; 0x5e0 <main+0x102>
     59e:	83 32       	cpi	r24, 0x23	; 35
     5a0:	91 05       	cpc	r25, r1
     5a2:	a1 05       	cpc	r26, r1
     5a4:	b1 05       	cpc	r27, r1
     5a6:	e1 f0       	breq	.+56     	; 0x5e0 <main+0x102>
     5a8:	24 e0       	ldi	r18, 0x04	; 4
     5aa:	f2 16       	cp	r15, r18
     5ac:	c9 f0       	breq	.+50     	; 0x5e0 <main+0x102>
     5ae:	ee 20       	and	r14, r14
     5b0:	b9 f4       	brne	.+46     	; 0x5e0 <main+0x102>
     5b2:	dd 20       	and	r13, r13
     5b4:	a9 f4       	brne	.+42     	; 0x5e0 <main+0x102>
     5b6:	11 23       	and	r17, r17
     5b8:	99 f4       	brne	.+38     	; 0x5e0 <main+0x102>
			{
				 FirstNum=KeypadValue;
				 FirstNumArr[FirstNumFlag]=FirstNum;
     5ba:	ef 2d       	mov	r30, r15
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	ee 0f       	add	r30, r30
     5c0:	ff 1f       	adc	r31, r31
     5c2:	ee 0f       	add	r30, r30
     5c4:	ff 1f       	adc	r31, r31
     5c6:	21 e0       	ldi	r18, 0x01	; 1
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	2c 0f       	add	r18, r28
     5cc:	3d 1f       	adc	r19, r29
     5ce:	e2 0f       	add	r30, r18
     5d0:	f3 1f       	adc	r31, r19
     5d2:	84 83       	std	Z+4, r24	; 0x04
     5d4:	95 83       	std	Z+5, r25	; 0x05
     5d6:	a6 83       	std	Z+6, r26	; 0x06
     5d8:	b7 83       	std	Z+7, r27	; 0x07
				 FirstNumFlag++ ;
     5da:	f3 94       	inc	r15
				 LCD_SendIntegarNumber(KeypadValue);
     5dc:	0e 94 31 09 	call	0x1262	; 0x1262 <LCD_SendIntegarNumber>
			}
			
			 if( (KeypadValue == '+' || KeypadValue == '-' || KeypadValue == '*'|| KeypadValue == '/' ) && (FirstNumFlag != 0  && OperatorFlag == 0  && SecondNumFlag == 0 && EqualFlag == 0)  )
     5e0:	8d a1       	lds	r24, 0x4d
     5e2:	9e a1       	lds	r25, 0x4e
     5e4:	af a1       	lds	r26, 0x4f
     5e6:	b8 a5       	lds	r27, 0x68
     5e8:	8b 32       	cpi	r24, 0x2B	; 43
     5ea:	91 05       	cpc	r25, r1
     5ec:	a1 05       	cpc	r26, r1
     5ee:	b1 05       	cpc	r27, r1
     5f0:	79 f0       	breq	.+30     	; 0x610 <main+0x132>
     5f2:	8d 32       	cpi	r24, 0x2D	; 45
     5f4:	91 05       	cpc	r25, r1
     5f6:	a1 05       	cpc	r26, r1
     5f8:	b1 05       	cpc	r27, r1
     5fa:	51 f0       	breq	.+20     	; 0x610 <main+0x132>
     5fc:	8a 32       	cpi	r24, 0x2A	; 42
     5fe:	91 05       	cpc	r25, r1
     600:	a1 05       	cpc	r26, r1
     602:	b1 05       	cpc	r27, r1
     604:	29 f0       	breq	.+10     	; 0x610 <main+0x132>
     606:	8f 32       	cpi	r24, 0x2F	; 47
     608:	91 05       	cpc	r25, r1
     60a:	a1 05       	cpc	r26, r1
     60c:	b1 05       	cpc	r27, r1
     60e:	e1 f4       	brne	.+56     	; 0x648 <main+0x16a>
     610:	ff 20       	and	r15, r15
     612:	51 f0       	breq	.+20     	; 0x628 <main+0x14a>
     614:	ee 20       	and	r14, r14
     616:	41 f4       	brne	.+16     	; 0x628 <main+0x14a>
     618:	dd 20       	and	r13, r13
     61a:	31 f4       	brne	.+12     	; 0x628 <main+0x14a>
     61c:	11 23       	and	r17, r17
     61e:	21 f4       	brne	.+8      	; 0x628 <main+0x14a>
			 {
			 	 Operator = KeypadValue;
     620:	b8 2e       	mov	r11, r24
			 	 OperatorFlag = 1 ;
			 	 LCD_sendChar(KeypadValue);
     622:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_sendChar>
			}
			
			 if( (KeypadValue == '+' || KeypadValue == '-' || KeypadValue == '*'|| KeypadValue == '/' ) && (FirstNumFlag != 0  && OperatorFlag == 0  && SecondNumFlag == 0 && EqualFlag == 0)  )
			 {
			 	 Operator = KeypadValue;
			 	 OperatorFlag = 1 ;
     626:	ec 2c       	mov	r14, r12
			 	 LCD_sendChar(KeypadValue);
			 }
			
			 if (KeypadValue != '+' && KeypadValue != '-' && KeypadValue != '*' && KeypadValue != '/' && KeypadValue != '='  && KeypadValue != '#' && FirstNumFlag != 0 && OperatorFlag == 1 && SecondNumFlag != 4 && EqualFlag == 0 )
     628:	8d a1       	lds	r24, 0x4d
     62a:	9e a1       	lds	r25, 0x4e
     62c:	af a1       	lds	r26, 0x4f
     62e:	b8 a5       	lds	r27, 0x68
     630:	8b 32       	cpi	r24, 0x2B	; 43
     632:	91 05       	cpc	r25, r1
     634:	a1 05       	cpc	r26, r1
     636:	b1 05       	cpc	r27, r1
     638:	09 f4       	brne	.+2      	; 0x63c <main+0x15e>
     63a:	a2 c0       	rjmp	.+324    	; 0x780 <main+0x2a2>
     63c:	8d 32       	cpi	r24, 0x2D	; 45
     63e:	91 05       	cpc	r25, r1
     640:	a1 05       	cpc	r26, r1
     642:	b1 05       	cpc	r27, r1
     644:	09 f4       	brne	.+2      	; 0x648 <main+0x16a>
     646:	9c c0       	rjmp	.+312    	; 0x780 <main+0x2a2>
     648:	8a 32       	cpi	r24, 0x2A	; 42
     64a:	91 05       	cpc	r25, r1
     64c:	a1 05       	cpc	r26, r1
     64e:	b1 05       	cpc	r27, r1
     650:	09 f4       	brne	.+2      	; 0x654 <main+0x176>
     652:	96 c0       	rjmp	.+300    	; 0x780 <main+0x2a2>
     654:	8f 32       	cpi	r24, 0x2F	; 47
     656:	91 05       	cpc	r25, r1
     658:	a1 05       	cpc	r26, r1
     65a:	b1 05       	cpc	r27, r1
     65c:	09 f4       	brne	.+2      	; 0x660 <main+0x182>
     65e:	90 c0       	rjmp	.+288    	; 0x780 <main+0x2a2>
     660:	8d 33       	cpi	r24, 0x3D	; 61
     662:	91 05       	cpc	r25, r1
     664:	a1 05       	cpc	r26, r1
     666:	b1 05       	cpc	r27, r1
     668:	89 f1       	breq	.+98     	; 0x6cc <main+0x1ee>
     66a:	83 32       	cpi	r24, 0x23	; 35
     66c:	91 05       	cpc	r25, r1
     66e:	a1 05       	cpc	r26, r1
     670:	b1 05       	cpc	r27, r1
     672:	09 f4       	brne	.+2      	; 0x676 <main+0x198>
     674:	85 c0       	rjmp	.+266    	; 0x780 <main+0x2a2>
     676:	ff 20       	and	r15, r15
     678:	09 f4       	brne	.+2      	; 0x67c <main+0x19e>
     67a:	82 c0       	rjmp	.+260    	; 0x780 <main+0x2a2>
     67c:	31 e0       	ldi	r19, 0x01	; 1
     67e:	e3 16       	cp	r14, r19
     680:	09 f0       	breq	.+2      	; 0x684 <main+0x1a6>
     682:	7e c0       	rjmp	.+252    	; 0x780 <main+0x2a2>
     684:	24 e0       	ldi	r18, 0x04	; 4
     686:	d2 16       	cp	r13, r18
     688:	09 f4       	brne	.+2      	; 0x68c <main+0x1ae>
     68a:	7a c0       	rjmp	.+244    	; 0x780 <main+0x2a2>
     68c:	11 23       	and	r17, r17
     68e:	09 f0       	breq	.+2      	; 0x692 <main+0x1b4>
     690:	77 c0       	rjmp	.+238    	; 0x780 <main+0x2a2>
			 {
				 SecondNum=KeypadValue;
				 SecondNumArr[SecondNumFlag]=SecondNum;
     692:	ed 2d       	mov	r30, r13
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	ee 0f       	add	r30, r30
     698:	ff 1f       	adc	r31, r31
     69a:	ee 0f       	add	r30, r30
     69c:	ff 1f       	adc	r31, r31
     69e:	21 e0       	ldi	r18, 0x01	; 1
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	2c 0f       	add	r18, r28
     6a4:	3d 1f       	adc	r19, r29
     6a6:	e2 0f       	add	r30, r18
     6a8:	f3 1f       	adc	r31, r19
     6aa:	84 8b       	std	Z+20, r24	; 0x14
     6ac:	95 8b       	std	Z+21, r25	; 0x15
     6ae:	a6 8b       	std	Z+22, r26	; 0x16
     6b0:	b7 8b       	std	Z+23, r27	; 0x17
				 SecondNumFlag++ ;
     6b2:	d3 94       	inc	r13
				 LCD_SendIntegarNumber(KeypadValue);
     6b4:	0e 94 31 09 	call	0x1262	; 0x1262 <LCD_SendIntegarNumber>
			 }
			
			 if (KeypadValue == '=' && FirstNumFlag != 0 && OperatorFlag == 1  && SecondNumFlag != 0 && EqualFlag == 0)
     6b8:	8d a1       	lds	r24, 0x4d
     6ba:	9e a1       	lds	r25, 0x4e
     6bc:	af a1       	lds	r26, 0x4f
     6be:	b8 a5       	lds	r27, 0x68
     6c0:	8d 33       	cpi	r24, 0x3D	; 61
     6c2:	91 05       	cpc	r25, r1
     6c4:	a1 05       	cpc	r26, r1
     6c6:	b1 05       	cpc	r27, r1
     6c8:	21 f0       	breq	.+8      	; 0x6d2 <main+0x1f4>
     6ca:	5a c0       	rjmp	.+180    	; 0x780 <main+0x2a2>
     6cc:	ff 20       	and	r15, r15
     6ce:	09 f4       	brne	.+2      	; 0x6d2 <main+0x1f4>
     6d0:	57 c0       	rjmp	.+174    	; 0x780 <main+0x2a2>
     6d2:	31 e0       	ldi	r19, 0x01	; 1
     6d4:	e3 16       	cp	r14, r19
     6d6:	09 f0       	breq	.+2      	; 0x6da <main+0x1fc>
     6d8:	53 c0       	rjmp	.+166    	; 0x780 <main+0x2a2>
     6da:	dd 20       	and	r13, r13
     6dc:	09 f4       	brne	.+2      	; 0x6e0 <main+0x202>
     6de:	50 c0       	rjmp	.+160    	; 0x780 <main+0x2a2>
     6e0:	11 23       	and	r17, r17
     6e2:	09 f0       	breq	.+2      	; 0x6e6 <main+0x208>
     6e4:	4d c0       	rjmp	.+154    	; 0x780 <main+0x2a2>
			 {
				 Equal=KeypadValue;
				 EqualFlag = 1 ;
				 LCD_sendChar(KeypadValue);
     6e6:	8d e3       	ldi	r24, 0x3D	; 61
     6e8:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_sendChar>
				 switch(Operator)
     6ec:	8b e2       	ldi	r24, 0x2B	; 43
     6ee:	b8 16       	cp	r11, r24
     6f0:	71 f0       	breq	.+28     	; 0x70e <main+0x230>
     6f2:	8b 15       	cp	r24, r11
     6f4:	28 f0       	brcs	.+10     	; 0x700 <main+0x222>
     6f6:	9a e2       	ldi	r25, 0x2A	; 42
     6f8:	b9 16       	cp	r11, r25
     6fa:	09 f0       	breq	.+2      	; 0x6fe <main+0x220>
     6fc:	40 c0       	rjmp	.+128    	; 0x77e <main+0x2a0>
     6fe:	23 c0       	rjmp	.+70     	; 0x746 <main+0x268>
     700:	ad e2       	ldi	r26, 0x2D	; 45
     702:	ba 16       	cp	r11, r26
     704:	91 f0       	breq	.+36     	; 0x72a <main+0x24c>
     706:	bf e2       	ldi	r27, 0x2F	; 47
     708:	bb 16       	cp	r11, r27
     70a:	c9 f5       	brne	.+114    	; 0x77e <main+0x2a0>
     70c:	2a c0       	rjmp	.+84     	; 0x762 <main+0x284>
				 {
				 	 case '+' :
				 	 ADD(FirstNumArr,SecondNumArr,FirstNumFlag,SecondNumFlag,&Result);
     70e:	ce 01       	movw	r24, r28
     710:	05 96       	adiw	r24, 0x05	; 5
     712:	be 01       	movw	r22, r28
     714:	6b 5e       	subi	r22, 0xEB	; 235
     716:	7f 4f       	sbci	r23, 0xFF	; 255
     718:	4f 2d       	mov	r20, r15
     71a:	2d 2d       	mov	r18, r13
     71c:	8e 01       	movw	r16, r28
     71e:	0f 5f       	subi	r16, 0xFF	; 255
     720:	1f 4f       	sbci	r17, 0xFF	; 255
     722:	0e 94 49 00 	call	0x92	; 0x92 <ADD>
			 }
			
			 if (KeypadValue == '=' && FirstNumFlag != 0 && OperatorFlag == 1  && SecondNumFlag != 0 && EqualFlag == 0)
			 {
				 Equal=KeypadValue;
				 EqualFlag = 1 ;
     726:	1c 2d       	mov	r17, r12
				 LCD_sendChar(KeypadValue);
				 switch(Operator)
				 {
				 	 case '+' :
				 	 ADD(FirstNumArr,SecondNumArr,FirstNumFlag,SecondNumFlag,&Result);
				 	 break;
     728:	2b c0       	rjmp	.+86     	; 0x780 <main+0x2a2>
				 	 case '-' :
				 	 SUB(FirstNumArr,SecondNumArr,FirstNumFlag,SecondNumFlag,&Result);
     72a:	ce 01       	movw	r24, r28
     72c:	05 96       	adiw	r24, 0x05	; 5
     72e:	be 01       	movw	r22, r28
     730:	6b 5e       	subi	r22, 0xEB	; 235
     732:	7f 4f       	sbci	r23, 0xFF	; 255
     734:	4f 2d       	mov	r20, r15
     736:	2d 2d       	mov	r18, r13
     738:	8e 01       	movw	r16, r28
     73a:	0f 5f       	subi	r16, 0xFF	; 255
     73c:	1f 4f       	sbci	r17, 0xFF	; 255
     73e:	0e 94 c6 00 	call	0x18c	; 0x18c <SUB>
			 }
			
			 if (KeypadValue == '=' && FirstNumFlag != 0 && OperatorFlag == 1  && SecondNumFlag != 0 && EqualFlag == 0)
			 {
				 Equal=KeypadValue;
				 EqualFlag = 1 ;
     742:	1c 2d       	mov	r17, r12
				 	 case '+' :
				 	 ADD(FirstNumArr,SecondNumArr,FirstNumFlag,SecondNumFlag,&Result);
				 	 break;
				 	 case '-' :
				 	 SUB(FirstNumArr,SecondNumArr,FirstNumFlag,SecondNumFlag,&Result);
				 	 break;
     744:	1d c0       	rjmp	.+58     	; 0x780 <main+0x2a2>
				 	 case '*' :
				 	 MUL(FirstNumArr,SecondNumArr,FirstNumFlag,SecondNumFlag,&Result);
     746:	ce 01       	movw	r24, r28
     748:	05 96       	adiw	r24, 0x05	; 5
     74a:	be 01       	movw	r22, r28
     74c:	6b 5e       	subi	r22, 0xEB	; 235
     74e:	7f 4f       	sbci	r23, 0xFF	; 255
     750:	4f 2d       	mov	r20, r15
     752:	2d 2d       	mov	r18, r13
     754:	8e 01       	movw	r16, r28
     756:	0f 5f       	subi	r16, 0xFF	; 255
     758:	1f 4f       	sbci	r17, 0xFF	; 255
     75a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <MUL>
			 }
			
			 if (KeypadValue == '=' && FirstNumFlag != 0 && OperatorFlag == 1  && SecondNumFlag != 0 && EqualFlag == 0)
			 {
				 Equal=KeypadValue;
				 EqualFlag = 1 ;
     75e:	1c 2d       	mov	r17, r12
				 	 case '-' :
				 	 SUB(FirstNumArr,SecondNumArr,FirstNumFlag,SecondNumFlag,&Result);
				 	 break;
				 	 case '*' :
				 	 MUL(FirstNumArr,SecondNumArr,FirstNumFlag,SecondNumFlag,&Result);
				 	 break;
     760:	0f c0       	rjmp	.+30     	; 0x780 <main+0x2a2>
				 	 case '/' :
				 	 DIV(FirstNumArr,SecondNumArr,FirstNumFlag,SecondNumFlag,&Result);
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	be 01       	movw	r22, r28
     768:	6b 5e       	subi	r22, 0xEB	; 235
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	4f 2d       	mov	r20, r15
     76e:	2d 2d       	mov	r18, r13
     770:	8e 01       	movw	r16, r28
     772:	0f 5f       	subi	r16, 0xFF	; 255
     774:	1f 4f       	sbci	r17, 0xFF	; 255
     776:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <DIV>
			 }
			
			 if (KeypadValue == '=' && FirstNumFlag != 0 && OperatorFlag == 1  && SecondNumFlag != 0 && EqualFlag == 0)
			 {
				 Equal=KeypadValue;
				 EqualFlag = 1 ;
     77a:	1c 2d       	mov	r17, r12
				 	 case '*' :
				 	 MUL(FirstNumArr,SecondNumArr,FirstNumFlag,SecondNumFlag,&Result);
				 	 break;
				 	 case '/' :
				 	 DIV(FirstNumArr,SecondNumArr,FirstNumFlag,SecondNumFlag,&Result);
				 	 break;
     77c:	01 c0       	rjmp	.+2      	; 0x780 <main+0x2a2>
			 }
			
			 if (KeypadValue == '=' && FirstNumFlag != 0 && OperatorFlag == 1  && SecondNumFlag != 0 && EqualFlag == 0)
			 {
				 Equal=KeypadValue;
				 EqualFlag = 1 ;
     77e:	1c 2d       	mov	r17, r12
				 	 case '/' :
				 	 DIV(FirstNumArr,SecondNumArr,FirstNumFlag,SecondNumFlag,&Result);
				 	 break;
				 }
			 }
			if (KeypadValue == '#')
     780:	8d a1       	lds	r24, 0x4d
     782:	9e a1       	lds	r25, 0x4e
     784:	af a1       	lds	r26, 0x4f
     786:	b8 a5       	lds	r27, 0x68
     788:	83 32       	cpi	r24, 0x23	; 35
     78a:	91 05       	cpc	r25, r1
     78c:	a1 05       	cpc	r26, r1
     78e:	b1 05       	cpc	r27, r1
     790:	09 f0       	breq	.+2      	; 0x794 <main+0x2b6>
     792:	df ce       	rjmp	.-578    	; 0x552 <main+0x74>
			 {
				 if (FirstNumFlag != 0 && OperatorFlag == 1  && SecondNumFlag != 0 && EqualFlag == 1)
     794:	ff 20       	and	r15, r15
     796:	09 f4       	brne	.+2      	; 0x79a <main+0x2bc>
     798:	dc ce       	rjmp	.-584    	; 0x552 <main+0x74>
     79a:	21 e0       	ldi	r18, 0x01	; 1
     79c:	e2 16       	cp	r14, r18
     79e:	09 f0       	breq	.+2      	; 0x7a2 <main+0x2c4>
     7a0:	d8 ce       	rjmp	.-592    	; 0x552 <main+0x74>
     7a2:	dd 20       	and	r13, r13
     7a4:	09 f4       	brne	.+2      	; 0x7a8 <main+0x2ca>
     7a6:	d5 ce       	rjmp	.-598    	; 0x552 <main+0x74>
     7a8:	11 30       	cpi	r17, 0x01	; 1
     7aa:	09 f0       	breq	.+2      	; 0x7ae <main+0x2d0>
     7ac:	d2 ce       	rjmp	.-604    	; 0x552 <main+0x74>
				 {
					 LCD_ClearDesplay();
     7ae:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_ClearDesplay>
					 LCD_sendComnd(LCD_GO_TO_2ND_LINE);
     7b2:	80 ec       	ldi	r24, 0xC0	; 192
     7b4:	0e 94 21 08 	call	0x1042	; 0x1042 <LCD_sendComnd>
					 LCD_GOTO_LOCATION(5,2);
     7b8:	85 e0       	ldi	r24, 0x05	; 5
     7ba:	62 e0       	ldi	r22, 0x02	; 2
     7bc:	0e 94 0e 09 	call	0x121c	; 0x121c <LCD_GOTO_LOCATION>
					 LCD_SendString("# Reset");
     7c0:	81 e7       	ldi	r24, 0x71	; 113
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <LCD_SendString>
					 LCD_sendComnd(LCD_GO_TO_1ND_LINE);
     7c8:	82 e0       	ldi	r24, 0x02	; 2
     7ca:	0e 94 21 08 	call	0x1042	; 0x1042 <LCD_sendComnd>
					 FirstNumFlag=SecondNumFlag=OperatorFlag=EqualFlag=0;
     7ce:	1a 2d       	mov	r17, r10
     7d0:	da 2c       	mov	r13, r10
     7d2:	ea 2c       	mov	r14, r10
     7d4:	fa 2c       	mov	r15, r10
     7d6:	bd ce       	rjmp	.-646    	; 0x552 <main+0x74>

000007d8 <DIO_SetPinDirection>:


DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PInDirection<=DIO_PIN_OUTPUT))
     7d8:	84 30       	cpi	r24, 0x04	; 4
     7da:	08 f0       	brcs	.+2      	; 0x7de <DIO_SetPinDirection+0x6>
     7dc:	8b c0       	rjmp	.+278    	; 0x8f4 <__stack+0x95>
     7de:	68 30       	cpi	r22, 0x08	; 8
     7e0:	08 f0       	brcs	.+2      	; 0x7e4 <DIO_SetPinDirection+0xc>
     7e2:	8a c0       	rjmp	.+276    	; 0x8f8 <__stack+0x99>
     7e4:	42 30       	cpi	r20, 0x02	; 2
     7e6:	08 f0       	brcs	.+2      	; 0x7ea <DIO_SetPinDirection+0x12>
     7e8:	89 c0       	rjmp	.+274    	; 0x8fc <__stack+0x9d>
	{
    	switch(PortId)
     7ea:	81 30       	cpi	r24, 0x01	; 1
     7ec:	41 f1       	breq	.+80     	; 0x83e <DIO_SetPinDirection+0x66>
     7ee:	81 30       	cpi	r24, 0x01	; 1
     7f0:	38 f0       	brcs	.+14     	; 0x800 <DIO_SetPinDirection+0x28>
     7f2:	82 30       	cpi	r24, 0x02	; 2
     7f4:	09 f4       	brne	.+2      	; 0x7f8 <DIO_SetPinDirection+0x20>
     7f6:	41 c0       	rjmp	.+130    	; 0x87a <__stack+0x1b>
     7f8:	83 30       	cpi	r24, 0x03	; 3
     7fa:	09 f0       	breq	.+2      	; 0x7fe <DIO_SetPinDirection+0x26>
     7fc:	81 c0       	rjmp	.+258    	; 0x900 <__stack+0xa1>
     7fe:	5b c0       	rjmp	.+182    	; 0x8b6 <__stack+0x57>
    	{
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
     800:	41 30       	cpi	r20, 0x01	; 1
     802:	71 f4       	brne	.+28     	; 0x820 <DIO_SetPinDirection+0x48>
     804:	2a b3       	in	r18, 0x1a	; 26
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	ac 01       	movw	r20, r24
     80c:	02 c0       	rjmp	.+4      	; 0x812 <DIO_SetPinDirection+0x3a>
     80e:	44 0f       	add	r20, r20
     810:	55 1f       	adc	r21, r21
     812:	6a 95       	dec	r22
     814:	e2 f7       	brpl	.-8      	; 0x80e <DIO_SetPinDirection+0x36>
     816:	ba 01       	movw	r22, r20
     818:	62 2b       	or	r22, r18
     81a:	6a bb       	out	0x1a, r22	; 26



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	08 95       	ret
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PInDirection<=DIO_PIN_OUTPUT))
	{
    	switch(PortId)
    	{
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
     820:	2a b3       	in	r18, 0x1a	; 26
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	ac 01       	movw	r20, r24
     828:	02 c0       	rjmp	.+4      	; 0x82e <DIO_SetPinDirection+0x56>
     82a:	44 0f       	add	r20, r20
     82c:	55 1f       	adc	r21, r21
     82e:	6a 95       	dec	r22
     830:	e2 f7       	brpl	.-8      	; 0x82a <DIO_SetPinDirection+0x52>
     832:	ba 01       	movw	r22, r20
     834:	60 95       	com	r22
     836:	62 23       	and	r22, r18
     838:	6a bb       	out	0x1a, r22	; 26



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	08 95       	ret
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
     83e:	41 30       	cpi	r20, 0x01	; 1
     840:	69 f4       	brne	.+26     	; 0x85c <DIO_SetPinDirection+0x84>
     842:	47 b3       	in	r20, 0x17	; 23
     844:	21 e0       	ldi	r18, 0x01	; 1
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	c9 01       	movw	r24, r18
     84a:	02 c0       	rjmp	.+4      	; 0x850 <DIO_SetPinDirection+0x78>
     84c:	88 0f       	add	r24, r24
     84e:	99 1f       	adc	r25, r25
     850:	6a 95       	dec	r22
     852:	e2 f7       	brpl	.-8      	; 0x84c <DIO_SetPinDirection+0x74>
     854:	84 2b       	or	r24, r20
     856:	87 bb       	out	0x17, r24	; 23



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	08 95       	ret
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
     85c:	27 b3       	in	r18, 0x17	; 23
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	ac 01       	movw	r20, r24
     864:	02 c0       	rjmp	.+4      	; 0x86a <__stack+0xb>
     866:	44 0f       	add	r20, r20
     868:	55 1f       	adc	r21, r21
     86a:	6a 95       	dec	r22
     86c:	e2 f7       	brpl	.-8      	; 0x866 <__stack+0x7>
     86e:	ba 01       	movw	r22, r20
     870:	60 95       	com	r22
     872:	62 23       	and	r22, r18
     874:	67 bb       	out	0x17, r22	; 23



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	08 95       	ret
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
     87a:	41 30       	cpi	r20, 0x01	; 1
     87c:	69 f4       	brne	.+26     	; 0x898 <__stack+0x39>
     87e:	44 b3       	in	r20, 0x14	; 20
     880:	21 e0       	ldi	r18, 0x01	; 1
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	c9 01       	movw	r24, r18
     886:	02 c0       	rjmp	.+4      	; 0x88c <__stack+0x2d>
     888:	88 0f       	add	r24, r24
     88a:	99 1f       	adc	r25, r25
     88c:	6a 95       	dec	r22
     88e:	e2 f7       	brpl	.-8      	; 0x888 <__stack+0x29>
     890:	84 2b       	or	r24, r20
     892:	84 bb       	out	0x14, r24	; 20



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	08 95       	ret
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
     898:	24 b3       	in	r18, 0x14	; 20
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	ac 01       	movw	r20, r24
     8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <__stack+0x47>
     8a2:	44 0f       	add	r20, r20
     8a4:	55 1f       	adc	r21, r21
     8a6:	6a 95       	dec	r22
     8a8:	e2 f7       	brpl	.-8      	; 0x8a2 <__stack+0x43>
     8aa:	ba 01       	movw	r22, r20
     8ac:	60 95       	com	r22
     8ae:	62 23       	and	r22, r18
     8b0:	64 bb       	out	0x14, r22	; 20



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	08 95       	ret
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
		   break;
		   
		   case DIO_PORTD:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRD_REG,PinId)) : (CLR_BIT(DDRD_REG,PinId));
     8b6:	41 30       	cpi	r20, 0x01	; 1
     8b8:	71 f4       	brne	.+28     	; 0x8d6 <__stack+0x77>
     8ba:	21 b3       	in	r18, 0x11	; 17
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	ac 01       	movw	r20, r24
     8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <__stack+0x69>
     8c4:	44 0f       	add	r20, r20
     8c6:	55 1f       	adc	r21, r21
     8c8:	6a 95       	dec	r22
     8ca:	e2 f7       	brpl	.-8      	; 0x8c4 <__stack+0x65>
     8cc:	ba 01       	movw	r22, r20
     8ce:	62 2b       	or	r22, r18
     8d0:	61 bb       	out	0x11, r22	; 17



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	08 95       	ret
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
		   break;
		   
		   case DIO_PORTD:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRD_REG,PinId)) : (CLR_BIT(DDRD_REG,PinId));
     8d6:	21 b3       	in	r18, 0x11	; 17
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	ac 01       	movw	r20, r24
     8de:	02 c0       	rjmp	.+4      	; 0x8e4 <__stack+0x85>
     8e0:	44 0f       	add	r20, r20
     8e2:	55 1f       	adc	r21, r21
     8e4:	6a 95       	dec	r22
     8e6:	e2 f7       	brpl	.-8      	; 0x8e0 <__stack+0x81>
     8e8:	ba 01       	movw	r22, r20
     8ea:	60 95       	com	r22
     8ec:	62 23       	and	r22, r18
     8ee:	61 bb       	out	0x11, r22	; 17



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	08 95       	ret
		   break;
	    }	
	} 
	else
	{
		ErrorStatus = DIO_NOK;
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	08 95       	ret
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	08 95       	ret
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	08 95       	ret



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     900:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
     902:	08 95       	ret

00000904 <DIO_SetPinValue>:

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PinValue<=DIO_PIN_HIGH))
     904:	84 30       	cpi	r24, 0x04	; 4
     906:	08 f0       	brcs	.+2      	; 0x90a <DIO_SetPinValue+0x6>
     908:	8b c0       	rjmp	.+278    	; 0xa20 <DIO_SetPinValue+0x11c>
     90a:	68 30       	cpi	r22, 0x08	; 8
     90c:	08 f0       	brcs	.+2      	; 0x910 <DIO_SetPinValue+0xc>
     90e:	8a c0       	rjmp	.+276    	; 0xa24 <DIO_SetPinValue+0x120>
     910:	42 30       	cpi	r20, 0x02	; 2
     912:	08 f0       	brcs	.+2      	; 0x916 <DIO_SetPinValue+0x12>
     914:	89 c0       	rjmp	.+274    	; 0xa28 <DIO_SetPinValue+0x124>
	{
			switch (PortId)
     916:	81 30       	cpi	r24, 0x01	; 1
     918:	41 f1       	breq	.+80     	; 0x96a <DIO_SetPinValue+0x66>
     91a:	81 30       	cpi	r24, 0x01	; 1
     91c:	38 f0       	brcs	.+14     	; 0x92c <DIO_SetPinValue+0x28>
     91e:	82 30       	cpi	r24, 0x02	; 2
     920:	09 f4       	brne	.+2      	; 0x924 <DIO_SetPinValue+0x20>
     922:	41 c0       	rjmp	.+130    	; 0x9a6 <DIO_SetPinValue+0xa2>
     924:	83 30       	cpi	r24, 0x03	; 3
     926:	09 f0       	breq	.+2      	; 0x92a <DIO_SetPinValue+0x26>
     928:	81 c0       	rjmp	.+258    	; 0xa2c <DIO_SetPinValue+0x128>
     92a:	5b c0       	rjmp	.+182    	; 0x9e2 <DIO_SetPinValue+0xde>
			{
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
     92c:	41 30       	cpi	r20, 0x01	; 1
     92e:	71 f4       	brne	.+28     	; 0x94c <DIO_SetPinValue+0x48>
     930:	2b b3       	in	r18, 0x1b	; 27
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	ac 01       	movw	r20, r24
     938:	02 c0       	rjmp	.+4      	; 0x93e <DIO_SetPinValue+0x3a>
     93a:	44 0f       	add	r20, r20
     93c:	55 1f       	adc	r21, r21
     93e:	6a 95       	dec	r22
     940:	e2 f7       	brpl	.-8      	; 0x93a <DIO_SetPinValue+0x36>
     942:	ba 01       	movw	r22, r20
     944:	62 2b       	or	r22, r18
     946:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	08 95       	ret
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PinValue<=DIO_PIN_HIGH))
	{
			switch (PortId)
			{
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
     94c:	2b b3       	in	r18, 0x1b	; 27
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	ac 01       	movw	r20, r24
     954:	02 c0       	rjmp	.+4      	; 0x95a <DIO_SetPinValue+0x56>
     956:	44 0f       	add	r20, r20
     958:	55 1f       	adc	r21, r21
     95a:	6a 95       	dec	r22
     95c:	e2 f7       	brpl	.-8      	; 0x956 <DIO_SetPinValue+0x52>
     95e:	ba 01       	movw	r22, r20
     960:	60 95       	com	r22
     962:	62 23       	and	r22, r18
     964:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	08 95       	ret
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
     96a:	41 30       	cpi	r20, 0x01	; 1
     96c:	69 f4       	brne	.+26     	; 0x988 <DIO_SetPinValue+0x84>
     96e:	48 b3       	in	r20, 0x18	; 24
     970:	21 e0       	ldi	r18, 0x01	; 1
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	c9 01       	movw	r24, r18
     976:	02 c0       	rjmp	.+4      	; 0x97c <DIO_SetPinValue+0x78>
     978:	88 0f       	add	r24, r24
     97a:	99 1f       	adc	r25, r25
     97c:	6a 95       	dec	r22
     97e:	e2 f7       	brpl	.-8      	; 0x978 <DIO_SetPinValue+0x74>
     980:	84 2b       	or	r24, r20
     982:	88 bb       	out	0x18, r24	; 24
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	08 95       	ret
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
     988:	28 b3       	in	r18, 0x18	; 24
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	ac 01       	movw	r20, r24
     990:	02 c0       	rjmp	.+4      	; 0x996 <DIO_SetPinValue+0x92>
     992:	44 0f       	add	r20, r20
     994:	55 1f       	adc	r21, r21
     996:	6a 95       	dec	r22
     998:	e2 f7       	brpl	.-8      	; 0x992 <DIO_SetPinValue+0x8e>
     99a:	ba 01       	movw	r22, r20
     99c:	60 95       	com	r22
     99e:	62 23       	and	r22, r18
     9a0:	68 bb       	out	0x18, r22	; 24
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	08 95       	ret
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
     9a6:	41 30       	cpi	r20, 0x01	; 1
     9a8:	69 f4       	brne	.+26     	; 0x9c4 <DIO_SetPinValue+0xc0>
     9aa:	45 b3       	in	r20, 0x15	; 21
     9ac:	21 e0       	ldi	r18, 0x01	; 1
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	c9 01       	movw	r24, r18
     9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <DIO_SetPinValue+0xb4>
     9b4:	88 0f       	add	r24, r24
     9b6:	99 1f       	adc	r25, r25
     9b8:	6a 95       	dec	r22
     9ba:	e2 f7       	brpl	.-8      	; 0x9b4 <DIO_SetPinValue+0xb0>
     9bc:	84 2b       	or	r24, r20
     9be:	85 bb       	out	0x15, r24	; 21
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	08 95       	ret
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
     9c4:	25 b3       	in	r18, 0x15	; 21
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	ac 01       	movw	r20, r24
     9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <DIO_SetPinValue+0xce>
     9ce:	44 0f       	add	r20, r20
     9d0:	55 1f       	adc	r21, r21
     9d2:	6a 95       	dec	r22
     9d4:	e2 f7       	brpl	.-8      	; 0x9ce <DIO_SetPinValue+0xca>
     9d6:	ba 01       	movw	r22, r20
     9d8:	60 95       	com	r22
     9da:	62 23       	and	r22, r18
     9dc:	65 bb       	out	0x15, r22	; 21
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	08 95       	ret
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTD:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTD_REG,PinId)) : (CLR_BIT(PORTD_REG,PinId)) ;
     9e2:	41 30       	cpi	r20, 0x01	; 1
     9e4:	71 f4       	brne	.+28     	; 0xa02 <DIO_SetPinValue+0xfe>
     9e6:	22 b3       	in	r18, 0x12	; 18
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	ac 01       	movw	r20, r24
     9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <DIO_SetPinValue+0xf0>
     9f0:	44 0f       	add	r20, r20
     9f2:	55 1f       	adc	r21, r21
     9f4:	6a 95       	dec	r22
     9f6:	e2 f7       	brpl	.-8      	; 0x9f0 <DIO_SetPinValue+0xec>
     9f8:	ba 01       	movw	r22, r20
     9fa:	62 2b       	or	r22, r18
     9fc:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	08 95       	ret
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTD:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTD_REG,PinId)) : (CLR_BIT(PORTD_REG,PinId)) ;
     a02:	22 b3       	in	r18, 0x12	; 18
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	ac 01       	movw	r20, r24
     a0a:	02 c0       	rjmp	.+4      	; 0xa10 <DIO_SetPinValue+0x10c>
     a0c:	44 0f       	add	r20, r20
     a0e:	55 1f       	adc	r21, r21
     a10:	6a 95       	dec	r22
     a12:	e2 f7       	brpl	.-8      	; 0xa0c <DIO_SetPinValue+0x108>
     a14:	ba 01       	movw	r22, r20
     a16:	60 95       	com	r22
     a18:	62 23       	and	r22, r18
     a1a:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	08 95       	ret
			    break;
			}	
		} 
	else
	{
		ErrorStatus = DIO_NOK;
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	08 95       	ret
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	08 95       	ret
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	08 95       	ret
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     a2c:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
     a2e:	08 95       	ret

00000a30 <DIO_TogglePinValue>:
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7))  //edit all
     a30:	84 30       	cpi	r24, 0x04	; 4
     a32:	08 f0       	brcs	.+2      	; 0xa36 <DIO_TogglePinValue+0x6>
     a34:	45 c0       	rjmp	.+138    	; 0xac0 <DIO_TogglePinValue+0x90>
     a36:	68 30       	cpi	r22, 0x08	; 8
     a38:	08 f0       	brcs	.+2      	; 0xa3c <DIO_TogglePinValue+0xc>
     a3a:	44 c0       	rjmp	.+136    	; 0xac4 <DIO_TogglePinValue+0x94>
	{
		switch (PortId)
     a3c:	81 30       	cpi	r24, 0x01	; 1
     a3e:	b1 f0       	breq	.+44     	; 0xa6c <DIO_TogglePinValue+0x3c>
     a40:	81 30       	cpi	r24, 0x01	; 1
     a42:	30 f0       	brcs	.+12     	; 0xa50 <DIO_TogglePinValue+0x20>
     a44:	82 30       	cpi	r24, 0x02	; 2
     a46:	01 f1       	breq	.+64     	; 0xa88 <DIO_TogglePinValue+0x58>
     a48:	83 30       	cpi	r24, 0x03	; 3
     a4a:	09 f0       	breq	.+2      	; 0xa4e <DIO_TogglePinValue+0x1e>
     a4c:	3d c0       	rjmp	.+122    	; 0xac8 <DIO_TogglePinValue+0x98>
     a4e:	2a c0       	rjmp	.+84     	; 0xaa4 <DIO_TogglePinValue+0x74>
		{
			case DIO_PORTA:
			TGL_BIT(PORTA_REG,PinId);
     a50:	2b b3       	in	r18, 0x1b	; 27
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	ac 01       	movw	r20, r24
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <DIO_TogglePinValue+0x2e>
     a5a:	44 0f       	add	r20, r20
     a5c:	55 1f       	adc	r21, r21
     a5e:	6a 95       	dec	r22
     a60:	e2 f7       	brpl	.-8      	; 0xa5a <DIO_TogglePinValue+0x2a>
     a62:	ba 01       	movw	r22, r20
     a64:	62 27       	eor	r22, r18
     a66:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
     a68:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch (PortId)
		{
			case DIO_PORTA:
			TGL_BIT(PORTA_REG,PinId);
			break;
     a6a:	08 95       	ret
			
			case DIO_PORTB:
			TGL_BIT(PORTB_REG,PinId);
     a6c:	28 b3       	in	r18, 0x18	; 24
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	ac 01       	movw	r20, r24
     a74:	02 c0       	rjmp	.+4      	; 0xa7a <DIO_TogglePinValue+0x4a>
     a76:	44 0f       	add	r20, r20
     a78:	55 1f       	adc	r21, r21
     a7a:	6a 95       	dec	r22
     a7c:	e2 f7       	brpl	.-8      	; 0xa76 <DIO_TogglePinValue+0x46>
     a7e:	ba 01       	movw	r22, r20
     a80:	62 27       	eor	r22, r18
     a82:	68 bb       	out	0x18, r22	; 24
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
     a84:	80 e0       	ldi	r24, 0x00	; 0
			TGL_BIT(PORTA_REG,PinId);
			break;
			
			case DIO_PORTB:
			TGL_BIT(PORTB_REG,PinId);
			break;
     a86:	08 95       	ret
			
			case DIO_PORTC:
			TGL_BIT(PORTC_REG,PinId);
     a88:	25 b3       	in	r18, 0x15	; 21
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	ac 01       	movw	r20, r24
     a90:	02 c0       	rjmp	.+4      	; 0xa96 <DIO_TogglePinValue+0x66>
     a92:	44 0f       	add	r20, r20
     a94:	55 1f       	adc	r21, r21
     a96:	6a 95       	dec	r22
     a98:	e2 f7       	brpl	.-8      	; 0xa92 <DIO_TogglePinValue+0x62>
     a9a:	ba 01       	movw	r22, r20
     a9c:	62 27       	eor	r22, r18
     a9e:	65 bb       	out	0x15, r22	; 21
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
     aa0:	80 e0       	ldi	r24, 0x00	; 0
			TGL_BIT(PORTB_REG,PinId);
			break;
			
			case DIO_PORTC:
			TGL_BIT(PORTC_REG,PinId);
			break;
     aa2:	08 95       	ret
			
			case DIO_PORTD:
			TGL_BIT(PORTD_REG,PinId);
     aa4:	22 b3       	in	r18, 0x12	; 18
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	ac 01       	movw	r20, r24
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <DIO_TogglePinValue+0x82>
     aae:	44 0f       	add	r20, r20
     ab0:	55 1f       	adc	r21, r21
     ab2:	6a 95       	dec	r22
     ab4:	e2 f7       	brpl	.-8      	; 0xaae <DIO_TogglePinValue+0x7e>
     ab6:	ba 01       	movw	r22, r20
     ab8:	62 27       	eor	r22, r18
     aba:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
     abc:	80 e0       	ldi	r24, 0x00	; 0
			TGL_BIT(PORTC_REG,PinId);
			break;
			
			case DIO_PORTD:
			TGL_BIT(PORTD_REG,PinId);
			break;
     abe:	08 95       	ret
		}
	} 
	else
	{
		ErrorStatus = DIO_NOK;
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	08 95       	ret
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	08 95       	ret
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
     ac8:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
     aca:	08 95       	ret

00000acc <DIO_ReadValue>:
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PinValue!=NULL)) //wild pointer 
     acc:	84 30       	cpi	r24, 0x04	; 4
     ace:	08 f0       	brcs	.+2      	; 0xad2 <DIO_ReadValue+0x6>
     ad0:	49 c0       	rjmp	.+146    	; 0xb64 <DIO_ReadValue+0x98>
     ad2:	68 30       	cpi	r22, 0x08	; 8
     ad4:	08 f0       	brcs	.+2      	; 0xad8 <DIO_ReadValue+0xc>
     ad6:	48 c0       	rjmp	.+144    	; 0xb68 <DIO_ReadValue+0x9c>
     ad8:	41 15       	cp	r20, r1
     ada:	51 05       	cpc	r21, r1
     adc:	09 f4       	brne	.+2      	; 0xae0 <DIO_ReadValue+0x14>
     ade:	46 c0       	rjmp	.+140    	; 0xb6c <DIO_ReadValue+0xa0>
	{
		switch (PortId)
     ae0:	81 30       	cpi	r24, 0x01	; 1
     ae2:	b1 f0       	breq	.+44     	; 0xb10 <DIO_ReadValue+0x44>
     ae4:	81 30       	cpi	r24, 0x01	; 1
     ae6:	30 f0       	brcs	.+12     	; 0xaf4 <DIO_ReadValue+0x28>
     ae8:	82 30       	cpi	r24, 0x02	; 2
     aea:	01 f1       	breq	.+64     	; 0xb2c <DIO_ReadValue+0x60>
     aec:	83 30       	cpi	r24, 0x03	; 3
     aee:	09 f0       	breq	.+2      	; 0xaf2 <DIO_ReadValue+0x26>
     af0:	3f c0       	rjmp	.+126    	; 0xb70 <DIO_ReadValue+0xa4>
     af2:	2a c0       	rjmp	.+84     	; 0xb48 <DIO_ReadValue+0x7c>
		{
			case DIO_PORTA:
			*PinValue= GET_BIT(PINA_REG,PinId);
     af4:	89 b3       	in	r24, 0x19	; 25
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	9c 01       	movw	r18, r24
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <DIO_ReadValue+0x34>
     afc:	35 95       	asr	r19
     afe:	27 95       	ror	r18
     b00:	6a 95       	dec	r22
     b02:	e2 f7       	brpl	.-8      	; 0xafc <DIO_ReadValue+0x30>
     b04:	b9 01       	movw	r22, r18
     b06:	61 70       	andi	r22, 0x01	; 1
     b08:	fa 01       	movw	r30, r20
     b0a:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     b0c:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch (PortId)
		{
			case DIO_PORTA:
			*PinValue= GET_BIT(PINA_REG,PinId);
			break;
     b0e:	08 95       	ret
			
			case DIO_PORTB:
			*PinValue= GET_BIT(PINB_REG,PinId);
     b10:	86 b3       	in	r24, 0x16	; 22
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	9c 01       	movw	r18, r24
     b16:	02 c0       	rjmp	.+4      	; 0xb1c <DIO_ReadValue+0x50>
     b18:	35 95       	asr	r19
     b1a:	27 95       	ror	r18
     b1c:	6a 95       	dec	r22
     b1e:	e2 f7       	brpl	.-8      	; 0xb18 <DIO_ReadValue+0x4c>
     b20:	b9 01       	movw	r22, r18
     b22:	61 70       	andi	r22, 0x01	; 1
     b24:	fa 01       	movw	r30, r20
     b26:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     b28:	80 e0       	ldi	r24, 0x00	; 0
			*PinValue= GET_BIT(PINA_REG,PinId);
			break;
			
			case DIO_PORTB:
			*PinValue= GET_BIT(PINB_REG,PinId);
			break;
     b2a:	08 95       	ret
			
			case DIO_PORTC:
			*PinValue= GET_BIT(PINC_REG,PinId);
     b2c:	83 b3       	in	r24, 0x13	; 19
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	9c 01       	movw	r18, r24
     b32:	02 c0       	rjmp	.+4      	; 0xb38 <DIO_ReadValue+0x6c>
     b34:	35 95       	asr	r19
     b36:	27 95       	ror	r18
     b38:	6a 95       	dec	r22
     b3a:	e2 f7       	brpl	.-8      	; 0xb34 <DIO_ReadValue+0x68>
     b3c:	b9 01       	movw	r22, r18
     b3e:	61 70       	andi	r22, 0x01	; 1
     b40:	fa 01       	movw	r30, r20
     b42:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     b44:	80 e0       	ldi	r24, 0x00	; 0
			*PinValue= GET_BIT(PINB_REG,PinId);
			break;
			
			case DIO_PORTC:
			*PinValue= GET_BIT(PINC_REG,PinId);
			break;
     b46:	08 95       	ret
			
			case DIO_PORTD:
			*PinValue= GET_BIT(PIND_REG,PinId);
     b48:	80 b3       	in	r24, 0x10	; 16
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	9c 01       	movw	r18, r24
     b4e:	02 c0       	rjmp	.+4      	; 0xb54 <DIO_ReadValue+0x88>
     b50:	35 95       	asr	r19
     b52:	27 95       	ror	r18
     b54:	6a 95       	dec	r22
     b56:	e2 f7       	brpl	.-8      	; 0xb50 <DIO_ReadValue+0x84>
     b58:	b9 01       	movw	r22, r18
     b5a:	61 70       	andi	r22, 0x01	; 1
     b5c:	fa 01       	movw	r30, r20
     b5e:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     b60:	80 e0       	ldi	r24, 0x00	; 0
			*PinValue= GET_BIT(PINC_REG,PinId);
			break;
			
			case DIO_PORTD:
			*PinValue= GET_BIT(PIND_REG,PinId);
			break;
     b62:	08 95       	ret
		}
	} 
	else
	{
		ErrorStatus = DIO_NOK;
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	08 95       	ret
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	08 95       	ret
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	08 95       	ret
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     b70:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
     b72:	08 95       	ret

00000b74 <DIO_activePinInPullUpResistance>:
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	 if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7))
     b74:	84 30       	cpi	r24, 0x04	; 4
     b76:	08 f0       	brcs	.+2      	; 0xb7a <DIO_activePinInPullUpResistance+0x6>
     b78:	45 c0       	rjmp	.+138    	; 0xc04 <DIO_activePinInPullUpResistance+0x90>
     b7a:	68 30       	cpi	r22, 0x08	; 8
     b7c:	08 f0       	brcs	.+2      	; 0xb80 <DIO_activePinInPullUpResistance+0xc>
     b7e:	44 c0       	rjmp	.+136    	; 0xc08 <DIO_activePinInPullUpResistance+0x94>
	 {
		 switch(PortId)
     b80:	81 30       	cpi	r24, 0x01	; 1
     b82:	b1 f0       	breq	.+44     	; 0xbb0 <DIO_activePinInPullUpResistance+0x3c>
     b84:	81 30       	cpi	r24, 0x01	; 1
     b86:	30 f0       	brcs	.+12     	; 0xb94 <DIO_activePinInPullUpResistance+0x20>
     b88:	82 30       	cpi	r24, 0x02	; 2
     b8a:	01 f1       	breq	.+64     	; 0xbcc <DIO_activePinInPullUpResistance+0x58>
     b8c:	83 30       	cpi	r24, 0x03	; 3
     b8e:	09 f0       	breq	.+2      	; 0xb92 <DIO_activePinInPullUpResistance+0x1e>
     b90:	3d c0       	rjmp	.+122    	; 0xc0c <DIO_activePinInPullUpResistance+0x98>
     b92:	2a c0       	rjmp	.+84     	; 0xbe8 <DIO_activePinInPullUpResistance+0x74>
		 {
			 case DIO_PORTA:
			 SET_BIT(PORTA_REG,PinId);
     b94:	2b b3       	in	r18, 0x1b	; 27
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	ac 01       	movw	r20, r24
     b9c:	02 c0       	rjmp	.+4      	; 0xba2 <DIO_activePinInPullUpResistance+0x2e>
     b9e:	44 0f       	add	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	6a 95       	dec	r22
     ba4:	e2 f7       	brpl	.-8      	; 0xb9e <DIO_activePinInPullUpResistance+0x2a>
     ba6:	ba 01       	movw	r22, r20
     ba8:	62 2b       	or	r22, r18
     baa:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     bac:	80 e0       	ldi	r24, 0x00	; 0
	 {
		 switch(PortId)
		 {
			 case DIO_PORTA:
			 SET_BIT(PORTA_REG,PinId);
			 break;
     bae:	08 95       	ret
			 
			 case DIO_PORTB:
			 SET_BIT(PORTB_REG,PinId);
     bb0:	28 b3       	in	r18, 0x18	; 24
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	ac 01       	movw	r20, r24
     bb8:	02 c0       	rjmp	.+4      	; 0xbbe <DIO_activePinInPullUpResistance+0x4a>
     bba:	44 0f       	add	r20, r20
     bbc:	55 1f       	adc	r21, r21
     bbe:	6a 95       	dec	r22
     bc0:	e2 f7       	brpl	.-8      	; 0xbba <DIO_activePinInPullUpResistance+0x46>
     bc2:	ba 01       	movw	r22, r20
     bc4:	62 2b       	or	r22, r18
     bc6:	68 bb       	out	0x18, r22	; 24
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     bc8:	80 e0       	ldi	r24, 0x00	; 0
			 SET_BIT(PORTA_REG,PinId);
			 break;
			 
			 case DIO_PORTB:
			 SET_BIT(PORTB_REG,PinId);
			 break;
     bca:	08 95       	ret
			 
			 case DIO_PORTC:
			 SET_BIT(PORTC_REG,PinId);
     bcc:	25 b3       	in	r18, 0x15	; 21
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	ac 01       	movw	r20, r24
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <DIO_activePinInPullUpResistance+0x66>
     bd6:	44 0f       	add	r20, r20
     bd8:	55 1f       	adc	r21, r21
     bda:	6a 95       	dec	r22
     bdc:	e2 f7       	brpl	.-8      	; 0xbd6 <DIO_activePinInPullUpResistance+0x62>
     bde:	ba 01       	movw	r22, r20
     be0:	62 2b       	or	r22, r18
     be2:	65 bb       	out	0x15, r22	; 21
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     be4:	80 e0       	ldi	r24, 0x00	; 0
			 SET_BIT(PORTB_REG,PinId);
			 break;
			 
			 case DIO_PORTC:
			 SET_BIT(PORTC_REG,PinId);
			 break;
     be6:	08 95       	ret
			 
			 case DIO_PORTD:
			 SET_BIT(PORTD_REG,PinId);
     be8:	22 b3       	in	r18, 0x12	; 18
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	ac 01       	movw	r20, r24
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <DIO_activePinInPullUpResistance+0x82>
     bf2:	44 0f       	add	r20, r20
     bf4:	55 1f       	adc	r21, r21
     bf6:	6a 95       	dec	r22
     bf8:	e2 f7       	brpl	.-8      	; 0xbf2 <DIO_activePinInPullUpResistance+0x7e>
     bfa:	ba 01       	movw	r22, r20
     bfc:	62 2b       	or	r22, r18
     bfe:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     c00:	80 e0       	ldi	r24, 0x00	; 0
			 SET_BIT(PORTC_REG,PinId);
			 break;
			 
			 case DIO_PORTD:
			 SET_BIT(PORTD_REG,PinId);
			 break;
     c02:	08 95       	ret
	      } 
	 }	 
	 else
	 {
		ErrorStatus = DIO_NOK;
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	08 95       	ret
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	08 95       	ret
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     c0c:	80 e0       	ldi	r24, 0x00	; 0
	 else
	 {
		ErrorStatus = DIO_NOK;
	 }
	 return ErrorStatus;
}
     c0e:	08 95       	ret

00000c10 <DIO_setPortDirection>:


DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD))
     c10:	84 30       	cpi	r24, 0x04	; 4
     c12:	a8 f5       	brcc	.+106    	; 0xc7e <DIO_setPortDirection+0x6e>
	{
		switch(PortId)
     c14:	81 30       	cpi	r24, 0x01	; 1
     c16:	91 f0       	breq	.+36     	; 0xc3c <DIO_setPortDirection+0x2c>
     c18:	81 30       	cpi	r24, 0x01	; 1
     c1a:	28 f0       	brcs	.+10     	; 0xc26 <DIO_setPortDirection+0x16>
     c1c:	82 30       	cpi	r24, 0x02	; 2
     c1e:	c9 f0       	breq	.+50     	; 0xc52 <DIO_setPortDirection+0x42>
     c20:	83 30       	cpi	r24, 0x03	; 3
     c22:	79 f5       	brne	.+94     	; 0xc82 <DIO_setPortDirection+0x72>
     c24:	21 c0       	rjmp	.+66     	; 0xc68 <DIO_setPortDirection+0x58>
		{
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
     c26:	6f 3f       	cpi	r22, 0xFF	; 255
     c28:	29 f4       	brne	.+10     	; 0xc34 <DIO_setPortDirection+0x24>
     c2a:	8a b3       	in	r24, 0x1a	; 26
     c2c:	8f ef       	ldi	r24, 0xFF	; 255
     c2e:	8a bb       	out	0x1a, r24	; 26



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	08 95       	ret
	if ( (PortId<=DIO_PORTD))
	{
		switch(PortId)
		{
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
     c34:	8a b3       	in	r24, 0x1a	; 26
     c36:	1a ba       	out	0x1a, r1	; 26



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	08 95       	ret
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
			break;
			
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
     c3c:	6f 3f       	cpi	r22, 0xFF	; 255
     c3e:	29 f4       	brne	.+10     	; 0xc4a <DIO_setPortDirection+0x3a>
     c40:	87 b3       	in	r24, 0x17	; 23
     c42:	8f ef       	ldi	r24, 0xFF	; 255
     c44:	87 bb       	out	0x17, r24	; 23



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	08 95       	ret
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
			break;
			
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
     c4a:	87 b3       	in	r24, 0x17	; 23
     c4c:	17 ba       	out	0x17, r1	; 23



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	08 95       	ret
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
			break;
			
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
     c52:	6f 3f       	cpi	r22, 0xFF	; 255
     c54:	29 f4       	brne	.+10     	; 0xc60 <DIO_setPortDirection+0x50>
     c56:	84 b3       	in	r24, 0x14	; 20
     c58:	8f ef       	ldi	r24, 0xFF	; 255
     c5a:	84 bb       	out	0x14, r24	; 20



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	08 95       	ret
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
			break;
			
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
     c60:	84 b3       	in	r24, 0x14	; 20
     c62:	14 ba       	out	0x14, r1	; 20



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	08 95       	ret
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
			break;
			
			case DIO_PORTD:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRD_REG)):(CLR_REG(DDRD_REG));
     c68:	6f 3f       	cpi	r22, 0xFF	; 255
     c6a:	29 f4       	brne	.+10     	; 0xc76 <DIO_setPortDirection+0x66>
     c6c:	81 b3       	in	r24, 0x11	; 17
     c6e:	8f ef       	ldi	r24, 0xFF	; 255
     c70:	81 bb       	out	0x11, r24	; 17



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	08 95       	ret
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
			break;
			
			case DIO_PORTD:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRD_REG)):(CLR_REG(DDRD_REG));
     c76:	81 b3       	in	r24, 0x11	; 17
     c78:	11 ba       	out	0x11, r1	; 17



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	08 95       	ret
			break;
		}
	} 
	else
	{
		ErrorStatus = DIO_NOK;
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	08 95       	ret



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     c82:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
     c84:	08 95       	ret

00000c86 <DIO_setPortValue>:


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD) )
     c86:	84 30       	cpi	r24, 0x04	; 4
     c88:	a8 f4       	brcc	.+42     	; 0xcb4 <DIO_setPortValue+0x2e>
	{
		switch(PortId)
     c8a:	81 30       	cpi	r24, 0x01	; 1
     c8c:	51 f0       	breq	.+20     	; 0xca2 <DIO_setPortValue+0x1c>
     c8e:	81 30       	cpi	r24, 0x01	; 1
     c90:	28 f0       	brcs	.+10     	; 0xc9c <DIO_setPortValue+0x16>
     c92:	82 30       	cpi	r24, 0x02	; 2
     c94:	49 f0       	breq	.+18     	; 0xca8 <DIO_setPortValue+0x22>
     c96:	83 30       	cpi	r24, 0x03	; 3
     c98:	79 f4       	brne	.+30     	; 0xcb8 <DIO_setPortValue+0x32>
     c9a:	09 c0       	rjmp	.+18     	; 0xcae <DIO_setPortValue+0x28>
		{
			case DIO_PORTA:
			PORTA_REG=PortValue;
     c9c:	6b bb       	out	0x1b, r22	; 27
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     c9e:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			PORTA_REG=PortValue;
			break;
     ca0:	08 95       	ret
			
			case DIO_PORTB:
			PORTB_REG=PortValue;
     ca2:	68 bb       	out	0x18, r22	; 24
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     ca4:	80 e0       	ldi	r24, 0x00	; 0
			PORTA_REG=PortValue;
			break;
			
			case DIO_PORTB:
			PORTB_REG=PortValue;
			break;
     ca6:	08 95       	ret
			
			case DIO_PORTC:
			PORTC_REG=PortValue;
     ca8:	65 bb       	out	0x15, r22	; 21
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     caa:	80 e0       	ldi	r24, 0x00	; 0
			PORTB_REG=PortValue;
			break;
			
			case DIO_PORTC:
			PORTC_REG=PortValue;
			break;
     cac:	08 95       	ret
			
			case DIO_PORTD:
			PORTD_REG=PortValue;
     cae:	62 bb       	out	0x12, r22	; 18
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     cb0:	80 e0       	ldi	r24, 0x00	; 0
			PORTC_REG=PortValue;
			break;
			
			case DIO_PORTD:
			PORTD_REG=PortValue;
			break;
     cb2:	08 95       	ret
		}
	}
	else
	{
	ErrorStatus = DIO_NOK;
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	08 95       	ret
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     cb8:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
	ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
     cba:	08 95       	ret

00000cbc <DIO_getPortValue>:


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD) && (PortValue!=NULL) )
     cbc:	84 30       	cpi	r24, 0x04	; 4
     cbe:	00 f5       	brcc	.+64     	; 0xd00 <DIO_getPortValue+0x44>
     cc0:	61 15       	cp	r22, r1
     cc2:	71 05       	cpc	r23, r1
     cc4:	f9 f0       	breq	.+62     	; 0xd04 <DIO_getPortValue+0x48>
	{
		switch(PortId)
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	61 f0       	breq	.+24     	; 0xce2 <DIO_getPortValue+0x26>
     cca:	81 30       	cpi	r24, 0x01	; 1
     ccc:	28 f0       	brcs	.+10     	; 0xcd8 <DIO_getPortValue+0x1c>
     cce:	82 30       	cpi	r24, 0x02	; 2
     cd0:	69 f0       	breq	.+26     	; 0xcec <DIO_getPortValue+0x30>
     cd2:	83 30       	cpi	r24, 0x03	; 3
     cd4:	c9 f4       	brne	.+50     	; 0xd08 <DIO_getPortValue+0x4c>
     cd6:	0f c0       	rjmp	.+30     	; 0xcf6 <DIO_getPortValue+0x3a>
		{
			case DIO_PORTA:
			*PortValue =PORTA_REG;
     cd8:	8b b3       	in	r24, 0x1b	; 27
     cda:	fb 01       	movw	r30, r22
     cdc:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     cde:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			*PortValue =PORTA_REG;
			break;
     ce0:	08 95       	ret
			
			case DIO_PORTB:
		    *PortValue =PORTB_REG;
     ce2:	88 b3       	in	r24, 0x18	; 24
     ce4:	fb 01       	movw	r30, r22
     ce6:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     ce8:	80 e0       	ldi	r24, 0x00	; 0
			*PortValue =PORTA_REG;
			break;
			
			case DIO_PORTB:
		    *PortValue =PORTB_REG;
			break;
     cea:	08 95       	ret
			
			case DIO_PORTC:
			*PortValue =PORTC_REG;
     cec:	85 b3       	in	r24, 0x15	; 21
     cee:	fb 01       	movw	r30, r22
     cf0:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     cf2:	80 e0       	ldi	r24, 0x00	; 0
		    *PortValue =PORTB_REG;
			break;
			
			case DIO_PORTC:
			*PortValue =PORTC_REG;
			break;
     cf4:	08 95       	ret
			
			case DIO_PORTD:
			*PortValue =PORTD_REG;
     cf6:	82 b3       	in	r24, 0x12	; 18
     cf8:	fb 01       	movw	r30, r22
     cfa:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     cfc:	80 e0       	ldi	r24, 0x00	; 0
			*PortValue =PORTC_REG;
			break;
			
			case DIO_PORTD:
			*PortValue =PORTD_REG;
			break;
     cfe:	08 95       	ret
		}
	}
	else
	{
		ErrorStatus = DIO_NOK;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	08 95       	ret
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	08 95       	ret
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     d08:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
     d0a:	08 95       	ret

00000d0c <DIO_togglePortValue>:


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD))
     d0c:	84 30       	cpi	r24, 0x04	; 4
     d0e:	e8 f4       	brcc	.+58     	; 0xd4a <DIO_togglePortValue+0x3e>
	{
		switch(PortId)
     d10:	81 30       	cpi	r24, 0x01	; 1
     d12:	61 f0       	breq	.+24     	; 0xd2c <DIO_togglePortValue+0x20>
     d14:	81 30       	cpi	r24, 0x01	; 1
     d16:	28 f0       	brcs	.+10     	; 0xd22 <DIO_togglePortValue+0x16>
     d18:	82 30       	cpi	r24, 0x02	; 2
     d1a:	69 f0       	breq	.+26     	; 0xd36 <DIO_togglePortValue+0x2a>
     d1c:	83 30       	cpi	r24, 0x03	; 3
     d1e:	b9 f4       	brne	.+46     	; 0xd4e <DIO_togglePortValue+0x42>
     d20:	0f c0       	rjmp	.+30     	; 0xd40 <DIO_togglePortValue+0x34>
		{
			case DIO_PORTA:
			TGL_REG(PORTA_REG);
     d22:	8b b3       	in	r24, 0x1b	; 27
     d24:	80 95       	com	r24
     d26:	8b bb       	out	0x1b, r24	; 27
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     d28:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			TGL_REG(PORTA_REG);
			break;
     d2a:	08 95       	ret
			
			case DIO_PORTB:
			TGL_REG(PORTB_REG);
     d2c:	88 b3       	in	r24, 0x18	; 24
     d2e:	80 95       	com	r24
     d30:	88 bb       	out	0x18, r24	; 24
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     d32:	80 e0       	ldi	r24, 0x00	; 0
			TGL_REG(PORTA_REG);
			break;
			
			case DIO_PORTB:
			TGL_REG(PORTB_REG);
			break;
     d34:	08 95       	ret
			
			case DIO_PORTC:
			TGL_REG(PORTC_REG);
     d36:	85 b3       	in	r24, 0x15	; 21
     d38:	80 95       	com	r24
     d3a:	85 bb       	out	0x15, r24	; 21
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     d3c:	80 e0       	ldi	r24, 0x00	; 0
			TGL_REG(PORTB_REG);
			break;
			
			case DIO_PORTC:
			TGL_REG(PORTC_REG);
			break;
     d3e:	08 95       	ret
			
			case DIO_PORTD:
			TGL_REG(PORTD_REG);
     d40:	82 b3       	in	r24, 0x12	; 18
     d42:	80 95       	com	r24
     d44:	82 bb       	out	0x12, r24	; 18
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     d46:	80 e0       	ldi	r24, 0x00	; 0
			TGL_REG(PORTC_REG);
			break;
			
			case DIO_PORTD:
			TGL_REG(PORTD_REG);
			break;
     d48:	08 95       	ret
		}
	}
	else
	{
		ErrorStatus = DIO_NOK;
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	08 95       	ret
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     d4e:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
     d50:	08 95       	ret

00000d52 <DIO_activePortInPullUpResistance>:


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD))
     d52:	84 30       	cpi	r24, 0x04	; 4
     d54:	e8 f4       	brcc	.+58     	; 0xd90 <DIO_activePortInPullUpResistance+0x3e>
	{
		switch(PortId)
     d56:	81 30       	cpi	r24, 0x01	; 1
     d58:	61 f0       	breq	.+24     	; 0xd72 <DIO_activePortInPullUpResistance+0x20>
     d5a:	81 30       	cpi	r24, 0x01	; 1
     d5c:	28 f0       	brcs	.+10     	; 0xd68 <DIO_activePortInPullUpResistance+0x16>
     d5e:	82 30       	cpi	r24, 0x02	; 2
     d60:	69 f0       	breq	.+26     	; 0xd7c <DIO_activePortInPullUpResistance+0x2a>
     d62:	83 30       	cpi	r24, 0x03	; 3
     d64:	b9 f4       	brne	.+46     	; 0xd94 <DIO_activePortInPullUpResistance+0x42>
     d66:	0f c0       	rjmp	.+30     	; 0xd86 <DIO_activePortInPullUpResistance+0x34>
		{
			case DIO_PORTA:
			SET_REG(PORTA_REG);
     d68:	8b b3       	in	r24, 0x1b	; 27
     d6a:	8f ef       	ldi	r24, 0xFF	; 255
     d6c:	8b bb       	out	0x1b, r24	; 27
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     d6e:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			SET_REG(PORTA_REG);
			break;
     d70:	08 95       	ret
			
			case DIO_PORTB:
			SET_REG(PORTB_REG);
     d72:	88 b3       	in	r24, 0x18	; 24
     d74:	8f ef       	ldi	r24, 0xFF	; 255
     d76:	88 bb       	out	0x18, r24	; 24
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     d78:	80 e0       	ldi	r24, 0x00	; 0
			SET_REG(PORTA_REG);
			break;
			
			case DIO_PORTB:
			SET_REG(PORTB_REG);
			break;
     d7a:	08 95       	ret
			
			case DIO_PORTC:
			SET_REG(PORTC_REG);
     d7c:	85 b3       	in	r24, 0x15	; 21
     d7e:	8f ef       	ldi	r24, 0xFF	; 255
     d80:	85 bb       	out	0x15, r24	; 21
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     d82:	80 e0       	ldi	r24, 0x00	; 0
			SET_REG(PORTB_REG);
			break;
			
			case DIO_PORTC:
			SET_REG(PORTC_REG);
			break;
     d84:	08 95       	ret
			
			case DIO_PORTD:
			SET_REG(PORTD_REG);
     d86:	82 b3       	in	r24, 0x12	; 18
     d88:	8f ef       	ldi	r24, 0xFF	; 255
     d8a:	82 bb       	out	0x12, r24	; 18
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     d8c:	80 e0       	ldi	r24, 0x00	; 0
			SET_REG(PORTC_REG);
			break;
			
			case DIO_PORTD:
			SET_REG(PORTD_REG);
			break;
     d8e:	08 95       	ret
		}
	}
	else
	{
		ErrorStatus = DIO_NOK;
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	08 95       	ret
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     d94:	80 e0       	ldi	r24, 0x00	; 0
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
	
}
     d96:	08 95       	ret

00000d98 <KEYPAD_init>:
#include "KEYPAD_interface.h"


void KEYPAD_init(void)
{
	DIO_SetPinDirection(KEYPAD_ROW0_PORT,KEYPAD_ROW0_PIN,DIO_PORT_INPUT);
     d98:	82 e0       	ldi	r24, 0x02	; 2
     d9a:	64 e0       	ldi	r22, 0x04	; 4
     d9c:	40 e0       	ldi	r20, 0x00	; 0
     d9e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_ROW1_PORT,KEYPAD_ROW1_PIN,DIO_PORT_INPUT);	
     da2:	82 e0       	ldi	r24, 0x02	; 2
     da4:	65 e0       	ldi	r22, 0x05	; 5
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_ROW2_PORT,KEYPAD_ROW2_PIN,DIO_PORT_INPUT);	
     dac:	82 e0       	ldi	r24, 0x02	; 2
     dae:	66 e0       	ldi	r22, 0x06	; 6
     db0:	40 e0       	ldi	r20, 0x00	; 0
     db2:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_ROW3_PORT,KEYPAD_ROW3_PIN,DIO_PORT_INPUT);	
     db6:	82 e0       	ldi	r24, 0x02	; 2
     db8:	67 e0       	ldi	r22, 0x07	; 7
     dba:	40 e0       	ldi	r20, 0x00	; 0
     dbc:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <DIO_SetPinDirection>
	
	DIO_SetPinDirection(KEYPAD_COL0_PORT,KEYPAD_COL0_PIN,DIO_PORT_OUTPUT);	
     dc0:	82 e0       	ldi	r24, 0x02	; 2
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	4f ef       	ldi	r20, 0xFF	; 255
     dc6:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_COL1_PORT,KEYPAD_COL1_PIN,DIO_PORT_OUTPUT);	
     dca:	82 e0       	ldi	r24, 0x02	; 2
     dcc:	61 e0       	ldi	r22, 0x01	; 1
     dce:	4f ef       	ldi	r20, 0xFF	; 255
     dd0:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_COL2_PORT,KEYPAD_COL2_PIN,DIO_PORT_OUTPUT);	
     dd4:	82 e0       	ldi	r24, 0x02	; 2
     dd6:	62 e0       	ldi	r22, 0x02	; 2
     dd8:	4f ef       	ldi	r20, 0xFF	; 255
     dda:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_COL3_PORT,KEYPAD_COL3_PIN,DIO_PORT_OUTPUT);	
     dde:	82 e0       	ldi	r24, 0x02	; 2
     de0:	63 e0       	ldi	r22, 0x03	; 3
     de2:	4f ef       	ldi	r20, 0xFF	; 255
     de4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <DIO_SetPinDirection>
	
	DIO_SetPinDirection(KEYPAD_COL0_PORT,KEYPAD_COL0_PIN,DIO_PIN_HIGH);
     de8:	82 e0       	ldi	r24, 0x02	; 2
     dea:	60 e0       	ldi	r22, 0x00	; 0
     dec:	41 e0       	ldi	r20, 0x01	; 1
     dee:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_COL1_PORT,KEYPAD_COL1_PIN,DIO_PIN_HIGH);
     df2:	82 e0       	ldi	r24, 0x02	; 2
     df4:	61 e0       	ldi	r22, 0x01	; 1
     df6:	41 e0       	ldi	r20, 0x01	; 1
     df8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_COL2_PORT,KEYPAD_COL2_PIN,DIO_PIN_HIGH);
     dfc:	82 e0       	ldi	r24, 0x02	; 2
     dfe:	62 e0       	ldi	r22, 0x02	; 2
     e00:	41 e0       	ldi	r20, 0x01	; 1
     e02:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_COL3_PORT,KEYPAD_COL3_PIN,DIO_PIN_HIGH);
     e06:	82 e0       	ldi	r24, 0x02	; 2
     e08:	63 e0       	ldi	r22, 0x03	; 3
     e0a:	41 e0       	ldi	r20, 0x01	; 1
     e0c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <DIO_SetPinDirection>
	
	DIO_activePinInPullUpResistance(KEYPAD_ROW0_PORT,KEYPAD_ROW0_PIN);
     e10:	82 e0       	ldi	r24, 0x02	; 2
     e12:	64 e0       	ldi	r22, 0x04	; 4
     e14:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_activePinInPullUpResistance>
	DIO_activePinInPullUpResistance(KEYPAD_ROW1_PORT,KEYPAD_ROW1_PIN);
     e18:	82 e0       	ldi	r24, 0x02	; 2
     e1a:	65 e0       	ldi	r22, 0x05	; 5
     e1c:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_activePinInPullUpResistance>
	DIO_activePinInPullUpResistance(KEYPAD_ROW2_PORT,KEYPAD_ROW2_PIN);
     e20:	82 e0       	ldi	r24, 0x02	; 2
     e22:	66 e0       	ldi	r22, 0x06	; 6
     e24:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_activePinInPullUpResistance>
	DIO_activePinInPullUpResistance(KEYPAD_ROW3_PORT,KEYPAD_ROW3_PIN);
     e28:	82 e0       	ldi	r24, 0x02	; 2
     e2a:	67 e0       	ldi	r22, 0x07	; 7
     e2c:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_activePinInPullUpResistance>
}
     e30:	08 95       	ret

00000e32 <KEYPAD_GetValue>:


void KEYPAD_GetValue(u8* ReturnedValue)  //try switch 
{
     e32:	2f 92       	push	r2
     e34:	3f 92       	push	r3
     e36:	4f 92       	push	r4
     e38:	5f 92       	push	r5
     e3a:	6f 92       	push	r6
     e3c:	7f 92       	push	r7
     e3e:	8f 92       	push	r8
     e40:	9f 92       	push	r9
     e42:	af 92       	push	r10
     e44:	bf 92       	push	r11
     e46:	cf 92       	push	r12
     e48:	df 92       	push	r13
     e4a:	ef 92       	push	r14
     e4c:	ff 92       	push	r15
     e4e:	0f 93       	push	r16
     e50:	1f 93       	push	r17
     e52:	cf 93       	push	r28
     e54:	df 93       	push	r29
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	a7 97       	sbiw	r28, 0x27	; 39
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	9f a3       	lds	r25, 0x5f
     e68:	8e a3       	lds	r24, 0x5e
	if (ReturnedValue != NULL)
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	09 f4       	brne	.+2      	; 0xe70 <KEYPAD_GetValue+0x3e>
     e6e:	90 c0       	rjmp	.+288    	; 0xf90 <KEYPAD_GetValue+0x15e>
	{
		*ReturnedValue=KEYPAD_NOT_PRESSED;
     e70:	8f ef       	ldi	r24, 0xFF	; 255
     e72:	ee a1       	lds	r30, 0x4e
     e74:	ff a1       	lds	r31, 0x4f
     e76:	80 83       	st	Z, r24
		
		u8 RowsCounter,ColumnsCounter ;
		
		u8 ColumnsPort[4]={KEYPAD_COL0_PORT,KEYPAD_COL1_PORT,KEYPAD_COL2_PORT,KEYPAD_COL3_PORT};
     e78:	82 e0       	ldi	r24, 0x02	; 2
     e7a:	8e 87       	std	Y+14, r24	; 0x0e
     e7c:	8f 87       	std	Y+15, r24	; 0x0f
     e7e:	88 8b       	std	Y+16, r24	; 0x10
     e80:	89 8b       	std	Y+17, r24	; 0x11
		u8 ColumnsPins[4]={KEYPAD_COL0_PIN,KEYPAD_COL1_PIN,KEYPAD_COL2_PIN,KEYPAD_COL3_PIN};
     e82:	1a 86       	std	Y+10, r1	; 0x0a
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	9b 87       	std	Y+11, r25	; 0x0b
     e88:	8c 87       	std	Y+12, r24	; 0x0c
     e8a:	93 e0       	ldi	r25, 0x03	; 3
     e8c:	9d 87       	std	Y+13, r25	; 0x0d
	
		u8 RowsPort[4]={KEYPAD_ROW0_PORT,KEYPAD_ROW1_PORT,KEYPAD_ROW2_PORT,KEYPAD_ROW3_PORT};
     e8e:	8e 83       	std	Y+6, r24	; 0x06
     e90:	8f 83       	std	Y+7, r24	; 0x07
     e92:	88 87       	std	Y+8, r24	; 0x08
     e94:	89 87       	std	Y+9, r24	; 0x09
     	u8 RowsPins[4]={KEYPAD_ROW0_PIN,KEYPAD_ROW1_PIN,KEYPAD_ROW2_PIN,KEYPAD_ROW3_PIN};
     e96:	84 e0       	ldi	r24, 0x04	; 4
     e98:	8a 83       	std	Y+2, r24	; 0x02
     e9a:	85 e0       	ldi	r24, 0x05	; 5
     e9c:	8b 83       	std	Y+3, r24	; 0x03
     e9e:	86 e0       	ldi	r24, 0x06	; 6
     ea0:	8c 83       	std	Y+4, r24	; 0x04
     ea2:	87 e0       	ldi	r24, 0x07	; 7
     ea4:	8d 83       	std	Y+5, r24	; 0x05
        
		u8 PinValue,PinFlag=0;
		
		u8 KEYPAD_Caracters [4][4] = KEYPAD_PATTERN;
     ea6:	de 01       	movw	r26, r28
     ea8:	52 96       	adiw	r26, 0x12	; 18
     eaa:	e3 e9       	ldi	r30, 0x93	; 147
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 e1       	ldi	r24, 0x10	; 16
     eb0:	01 90       	ld	r0, Z+
     eb2:	0d 92       	st	X+, r0
     eb4:	81 50       	subi	r24, 0x01	; 1
     eb6:	e1 f7       	brne	.-8      	; 0xeb0 <KEYPAD_GetValue+0x7e>
     eb8:	0f 2e       	mov	r0, r31
     eba:	fe e0       	ldi	r31, 0x0E	; 14
     ebc:	2f 2e       	mov	r2, r31
     ebe:	33 24       	eor	r3, r3
     ec0:	f0 2d       	mov	r31, r0
     ec2:	2c 0e       	add	r2, r28
     ec4:	3d 1e       	adc	r3, r29
     ec6:	ce 01       	movw	r24, r28
     ec8:	0a 96       	adiw	r24, 0x0a	; 10
     eca:	9b a3       	lds	r25, 0x5b
     ecc:	8a a3       	lds	r24, 0x5a
     ece:	88 24       	eor	r8, r8
     ed0:	99 24       	eor	r9, r9
										  
		for(ColumnsCounter=0;ColumnsCounter<4;ColumnsCounter++)
		{
			//Activate Each Column 
			DIO_SetPinValue(ColumnsPort[ColumnsCounter],ColumnsPins[ColumnsCounter],DIO_PIN_LOW);
     ed2:	9d a2       	lds	r25, 0x9d
     ed4:	8c a2       	lds	r24, 0x9c
     ed6:	f1 01       	movw	r30, r2
     ed8:	71 90       	ld	r7, Z+
     eda:	1f 01       	movw	r2, r30
     edc:	ea a1       	lds	r30, 0x4a
     ede:	fb a1       	lds	r31, 0x4b
     ee0:	61 90       	ld	r6, Z+
     ee2:	fb a3       	lds	r31, 0x5b
     ee4:	ea a3       	lds	r30, 0x5a
     ee6:	87 2d       	mov	r24, r7
     ee8:	66 2d       	mov	r22, r6
     eea:	40 e0       	ldi	r20, 0x00	; 0
     eec:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
     ef0:	0f 2e       	mov	r0, r31
     ef2:	f6 e0       	ldi	r31, 0x06	; 6
     ef4:	cf 2e       	mov	r12, r31
     ef6:	dd 24       	eor	r13, r13
     ef8:	f0 2d       	mov	r31, r0
     efa:	cc 0e       	add	r12, r28
     efc:	dd 1e       	adc	r13, r29
     efe:	aa 24       	eor	r10, r10
     f00:	bb 24       	eor	r11, r11
     f02:	68 94       	set
     f04:	a1 f8       	bld	r10, 1
     f06:	ac 0e       	add	r10, r28
     f08:	bd 1e       	adc	r11, r29
     f0a:	00 e0       	ldi	r16, 0x00	; 0
     f0c:	10 e0       	ldi	r17, 0x00	; 0
			for (RowsCounter=0;RowsCounter<4;RowsCounter++)
			{
				//Read Rows 
				DIO_ReadValue(RowsPort[RowsCounter],RowsPins[RowsCounter],&PinValue);
     f0e:	28 01       	movw	r4, r16
     f10:	f6 01       	movw	r30, r12
     f12:	e1 90       	ld	r14, Z+
     f14:	6f 01       	movw	r12, r30
     f16:	f5 01       	movw	r30, r10
     f18:	f1 90       	ld	r15, Z+
     f1a:	5f 01       	movw	r10, r30
     f1c:	8e 2d       	mov	r24, r14
     f1e:	6f 2d       	mov	r22, r15
     f20:	ae 01       	movw	r20, r28
     f22:	4f 5f       	subi	r20, 0xFF	; 255
     f24:	5f 4f       	sbci	r21, 0xFF	; 255
     f26:	0e 94 66 05 	call	0xacc	; 0xacc <DIO_ReadValue>
				if (KEYPAD_PRESSED == PinValue)
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	88 23       	and	r24, r24
     f2e:	f1 f4       	brne	.+60     	; 0xf6c <KEYPAD_GetValue+0x13a>
				{
					while (KEYPAD_PRESSED == PinValue)
					{
						//block keypad to take one value for one pressed 
						DIO_ReadValue(RowsPort[RowsCounter],RowsPins[RowsCounter],&PinValue);
     f30:	8e 2d       	mov	r24, r14
     f32:	6f 2d       	mov	r22, r15
     f34:	ae 01       	movw	r20, r28
     f36:	4f 5f       	subi	r20, 0xFF	; 255
     f38:	5f 4f       	sbci	r21, 0xFF	; 255
     f3a:	0e 94 66 05 	call	0xacc	; 0xacc <DIO_ReadValue>
			{
				//Read Rows 
				DIO_ReadValue(RowsPort[RowsCounter],RowsPins[RowsCounter],&PinValue);
				if (KEYPAD_PRESSED == PinValue)
				{
					while (KEYPAD_PRESSED == PinValue)
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	88 23       	and	r24, r24
     f42:	b1 f3       	breq	.-20     	; 0xf30 <KEYPAD_GetValue+0xfe>
					{
						//block keypad to take one value for one pressed 
						DIO_ReadValue(RowsPort[RowsCounter],RowsPins[RowsCounter],&PinValue);
					}
					*ReturnedValue = KEYPAD_Caracters[RowsCounter][ColumnsCounter];
     f44:	f2 01       	movw	r30, r4
     f46:	ee 0f       	add	r30, r30
     f48:	ff 1f       	adc	r31, r31
     f4a:	ee 0f       	add	r30, r30
     f4c:	ff 1f       	adc	r31, r31
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	8c 0f       	add	r24, r28
     f54:	9d 1f       	adc	r25, r29
     f56:	e8 0f       	add	r30, r24
     f58:	f9 1f       	adc	r31, r25
     f5a:	8c a1       	lds	r24, 0x4c
     f5c:	9d a1       	lds	r25, 0x4d
     f5e:	e8 0f       	add	r30, r24
     f60:	f9 1f       	adc	r31, r25
     f62:	81 89       	ldd	r24, Z+17	; 0x11
     f64:	ee a1       	lds	r30, 0x4e
     f66:	ff a1       	lds	r31, 0x4f
     f68:	80 83       	st	Z, r24
     f6a:	12 c0       	rjmp	.+36     	; 0xf90 <KEYPAD_GetValue+0x15e>
     f6c:	0f 5f       	subi	r16, 0xFF	; 255
     f6e:	1f 4f       	sbci	r17, 0xFF	; 255
										  
		for(ColumnsCounter=0;ColumnsCounter<4;ColumnsCounter++)
		{
			//Activate Each Column 
			DIO_SetPinValue(ColumnsPort[ColumnsCounter],ColumnsPins[ColumnsCounter],DIO_PIN_LOW);
			for (RowsCounter=0;RowsCounter<4;RowsCounter++)
     f70:	04 30       	cpi	r16, 0x04	; 4
     f72:	11 05       	cpc	r17, r1
     f74:	61 f6       	brne	.-104    	; 0xf0e <KEYPAD_GetValue+0xdc>
			if (1 ==PinFlag)
			{
				break;
			}
			//Deactivate Current Column 
			DIO_SetPinValue(ColumnsPort[ColumnsCounter],ColumnsPins[ColumnsCounter],DIO_PIN_HIGH);
     f76:	87 2d       	mov	r24, r7
     f78:	66 2d       	mov	r22, r6
     f7a:	41 e0       	ldi	r20, 0x01	; 1
     f7c:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
     f80:	08 94       	sec
     f82:	81 1c       	adc	r8, r1
     f84:	91 1c       	adc	r9, r1
        
		u8 PinValue,PinFlag=0;
		
		u8 KEYPAD_Caracters [4][4] = KEYPAD_PATTERN;
										  
		for(ColumnsCounter=0;ColumnsCounter<4;ColumnsCounter++)
     f86:	f4 e0       	ldi	r31, 0x04	; 4
     f88:	8f 16       	cp	r8, r31
     f8a:	91 04       	cpc	r9, r1
     f8c:	09 f0       	breq	.+2      	; 0xf90 <KEYPAD_GetValue+0x15e>
     f8e:	a1 cf       	rjmp	.-190    	; 0xed2 <KEYPAD_GetValue+0xa0>
	} 
	else
	{
		//do nothing
	}	
}
     f90:	a7 96       	adiw	r28, 0x27	; 39
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	f8 94       	cli
     f96:	de bf       	out	0x3e, r29	; 62
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	cd bf       	out	0x3d, r28	; 61
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	1f 91       	pop	r17
     fa2:	0f 91       	pop	r16
     fa4:	ff 90       	pop	r15
     fa6:	ef 90       	pop	r14
     fa8:	df 90       	pop	r13
     faa:	cf 90       	pop	r12
     fac:	bf 90       	pop	r11
     fae:	af 90       	pop	r10
     fb0:	9f 90       	pop	r9
     fb2:	8f 90       	pop	r8
     fb4:	7f 90       	pop	r7
     fb6:	6f 90       	pop	r6
     fb8:	5f 90       	pop	r5
     fba:	4f 90       	pop	r4
     fbc:	3f 90       	pop	r3
     fbe:	2f 90       	pop	r2
     fc0:	08 95       	ret

00000fc2 <private_WriteHalfPort>:
	LCD_sendComnd(LCD_SHIFTRIGHT);
}


void private_WriteHalfPort (u8 Value)
{
     fc2:	cf 93       	push	r28
     fc4:	c8 2f       	mov	r28, r24
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit0)) ? (DIO_SetPinValue(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_HIGH));
     fc6:	80 fd       	sbrc	r24, 0
     fc8:	06 c0       	rjmp	.+12     	; 0xfd6 <private_WriteHalfPort+0x14>
     fca:	83 e0       	ldi	r24, 0x03	; 3
     fcc:	64 e0       	ldi	r22, 0x04	; 4
     fce:	40 e0       	ldi	r20, 0x00	; 0
     fd0:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
     fd4:	05 c0       	rjmp	.+10     	; 0xfe0 <private_WriteHalfPort+0x1e>
     fd6:	83 e0       	ldi	r24, 0x03	; 3
     fd8:	64 e0       	ldi	r22, 0x04	; 4
     fda:	41 e0       	ldi	r20, 0x01	; 1
     fdc:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit1)) ? (DIO_SetPinValue(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_HIGH));
     fe0:	8c 2f       	mov	r24, r28
     fe2:	86 95       	lsr	r24
     fe4:	80 fd       	sbrc	r24, 0
     fe6:	06 c0       	rjmp	.+12     	; 0xff4 <private_WriteHalfPort+0x32>
     fe8:	83 e0       	ldi	r24, 0x03	; 3
     fea:	65 e0       	ldi	r22, 0x05	; 5
     fec:	40 e0       	ldi	r20, 0x00	; 0
     fee:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
     ff2:	05 c0       	rjmp	.+10     	; 0xffe <private_WriteHalfPort+0x3c>
     ff4:	83 e0       	ldi	r24, 0x03	; 3
     ff6:	65 e0       	ldi	r22, 0x05	; 5
     ff8:	41 e0       	ldi	r20, 0x01	; 1
     ffa:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit2)) ? (DIO_SetPinValue(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_HIGH));
     ffe:	8c 2f       	mov	r24, r28
    1000:	86 95       	lsr	r24
    1002:	86 95       	lsr	r24
    1004:	80 fd       	sbrc	r24, 0
    1006:	06 c0       	rjmp	.+12     	; 0x1014 <private_WriteHalfPort+0x52>
    1008:	83 e0       	ldi	r24, 0x03	; 3
    100a:	66 e0       	ldi	r22, 0x06	; 6
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
    1012:	05 c0       	rjmp	.+10     	; 0x101e <private_WriteHalfPort+0x5c>
    1014:	83 e0       	ldi	r24, 0x03	; 3
    1016:	66 e0       	ldi	r22, 0x06	; 6
    1018:	41 e0       	ldi	r20, 0x01	; 1
    101a:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit3)) ? (DIO_SetPinValue(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_HIGH));
    101e:	c6 95       	lsr	r28
    1020:	c6 95       	lsr	r28
    1022:	c6 95       	lsr	r28
    1024:	c0 fd       	sbrc	r28, 0
    1026:	06 c0       	rjmp	.+12     	; 0x1034 <private_WriteHalfPort+0x72>
    1028:	83 e0       	ldi	r24, 0x03	; 3
    102a:	67 e0       	ldi	r22, 0x07	; 7
    102c:	40 e0       	ldi	r20, 0x00	; 0
    102e:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
    1032:	05 c0       	rjmp	.+10     	; 0x103e <private_WriteHalfPort+0x7c>
    1034:	83 e0       	ldi	r24, 0x03	; 3
    1036:	67 e0       	ldi	r22, 0x07	; 7
    1038:	41 e0       	ldi	r20, 0x01	; 1
    103a:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
}
    103e:	cf 91       	pop	r28
    1040:	08 95       	ret

00001042 <LCD_sendComnd>:
	_delay_us(45);

}

void LCD_sendComnd(u8 Cmnd)
{
    1042:	cf 93       	push	r28
    1044:	c8 2f       	mov	r28, r24
	DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	61 e0       	ldi	r22, 0x01	; 1
    104a:	40 e0       	ldi	r20, 0x00	; 0
    104c:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	62 e0       	ldi	r22, 0x02	; 2
    1054:	40 e0       	ldi	r20, 0x00	; 0
    1056:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
	
	private_WriteHalfPort(Cmnd>>4);                                    //PORTA_REG= (PORTA_REG & 0x0f) | (Cmnd & 0xf0) 
    105a:	8c 2f       	mov	r24, r28
    105c:	82 95       	swap	r24
    105e:	8f 70       	andi	r24, 0x0F	; 15
    1060:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	63 e0       	ldi	r22, 0x03	; 3
    1068:	41 e0       	ldi	r20, 0x01	; 1
    106a:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
    106e:	8f e9       	ldi	r24, 0x9F	; 159
    1070:	9f e0       	ldi	r25, 0x0F	; 15
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	f1 f7       	brne	.-4      	; 0x1072 <LCD_sendComnd+0x30>
    1076:	00 c0       	rjmp	.+0      	; 0x1078 <LCD_sendComnd+0x36>
    1078:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	63 e0       	ldi	r22, 0x03	; 3
    107e:	40 e0       	ldi	r20, 0x00	; 0
    1080:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
	
	private_WriteHalfPort(Cmnd);                                      //PORTA_REG= (PORTA_REG & 0x0f) | ((Cmnd & 0xf0) <<4)
    1084:	8c 2f       	mov	r24, r28
    1086:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	63 e0       	ldi	r22, 0x03	; 3
    108e:	41 e0       	ldi	r20, 0x01	; 1
    1090:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
    1094:	8f e9       	ldi	r24, 0x9F	; 159
    1096:	9f e0       	ldi	r25, 0x0F	; 15
    1098:	01 97       	sbiw	r24, 0x01	; 1
    109a:	f1 f7       	brne	.-4      	; 0x1098 <LCD_sendComnd+0x56>
    109c:	00 c0       	rjmp	.+0      	; 0x109e <LCD_sendComnd+0x5c>
    109e:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	63 e0       	ldi	r22, 0x03	; 3
    10a4:	40 e0       	ldi	r20, 0x00	; 0
    10a6:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
}
    10aa:	cf 91       	pop	r28
    10ac:	08 95       	ret

000010ae <LCD_init>:


void LCD_init(void)
{
	//SET PIN AS OUTPUT
	DIO_SetPinDirection(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_OUTPUT);
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	61 e0       	ldi	r22, 0x01	; 1
    10b2:	41 e0       	ldi	r20, 0x01	; 1
    10b4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_OUTPUT);
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	62 e0       	ldi	r22, 0x02	; 2
    10bc:	41 e0       	ldi	r20, 0x01	; 1
    10be:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_OUTPUT);
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	63 e0       	ldi	r22, 0x03	; 3
    10c6:	41 e0       	ldi	r20, 0x01	; 1
    10c8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <DIO_SetPinDirection>
	
	
	 DIO_SetPinDirection(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_OUTPUT);
    10cc:	83 e0       	ldi	r24, 0x03	; 3
    10ce:	64 e0       	ldi	r22, 0x04	; 4
    10d0:	41 e0       	ldi	r20, 0x01	; 1
    10d2:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <DIO_SetPinDirection>
	 DIO_SetPinDirection(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_OUTPUT);
    10d6:	83 e0       	ldi	r24, 0x03	; 3
    10d8:	65 e0       	ldi	r22, 0x05	; 5
    10da:	41 e0       	ldi	r20, 0x01	; 1
    10dc:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <DIO_SetPinDirection>
	 DIO_SetPinDirection(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_OUTPUT);
    10e0:	83 e0       	ldi	r24, 0x03	; 3
    10e2:	66 e0       	ldi	r22, 0x06	; 6
    10e4:	41 e0       	ldi	r20, 0x01	; 1
    10e6:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <DIO_SetPinDirection>
	 DIO_SetPinDirection(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_OUTPUT);
    10ea:	83 e0       	ldi	r24, 0x03	; 3
    10ec:	67 e0       	ldi	r22, 0x07	; 7
    10ee:	41 e0       	ldi	r20, 0x01	; 1
    10f0:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <DIO_SetPinDirection>
    10f4:	8f e7       	ldi	r24, 0x7F	; 127
    10f6:	95 eb       	ldi	r25, 0xB5	; 181
    10f8:	a1 e0       	ldi	r26, 0x01	; 1
    10fa:	81 50       	subi	r24, 0x01	; 1
    10fc:	90 40       	sbci	r25, 0x00	; 0
    10fe:	a0 40       	sbci	r26, 0x00	; 0
    1100:	e1 f7       	brne	.-8      	; 0x10fa <LCD_init+0x4c>
    1102:	00 c0       	rjmp	.+0      	; 0x1104 <LCD_init+0x56>
    1104:	00 00       	nop
	 	 
		
	_delay_ms(35);
	DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	61 e0       	ldi	r22, 0x01	; 1
    110a:	40 e0       	ldi	r20, 0x00	; 0
    110c:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	62 e0       	ldi	r22, 0x02	; 2
    1114:	40 e0       	ldi	r20, 0x00	; 0
    1116:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
	private_WriteHalfPort(LCD_COMMAND_FOR_FOUR_BIT_MODE);
    111a:	82 e0       	ldi	r24, 0x02	; 2
    111c:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	63 e0       	ldi	r22, 0x03	; 3
    1124:	41 e0       	ldi	r20, 0x01	; 1
    1126:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
    112a:	af e9       	ldi	r26, 0x9F	; 159
    112c:	bf e0       	ldi	r27, 0x0F	; 15
    112e:	11 97       	sbiw	r26, 0x01	; 1
    1130:	f1 f7       	brne	.-4      	; 0x112e <LCD_init+0x80>
    1132:	00 c0       	rjmp	.+0      	; 0x1134 <LCD_init+0x86>
    1134:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	63 e0       	ldi	r22, 0x03	; 3
    113a:	40 e0       	ldi	r20, 0x00	; 0
    113c:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
	
	LCD_sendComnd(LCD_FUNCTION_SET);
    1140:	88 e2       	ldi	r24, 0x28	; 40
    1142:	0e 94 21 08 	call	0x1042	; 0x1042 <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1146:	b0 ef       	ldi	r27, 0xF0	; 240
    1148:	ba 95       	dec	r27
    114a:	f1 f7       	brne	.-4      	; 0x1148 <LCD_init+0x9a>
	_delay_us(45);
	
	LCD_sendComnd(LCD_DISPLAY_ON_OFF_CONTROL);
    114c:	8f e0       	ldi	r24, 0x0F	; 15
    114e:	0e 94 21 08 	call	0x1042	; 0x1042 <LCD_sendComnd>
    1152:	80 ef       	ldi	r24, 0xF0	; 240
    1154:	8a 95       	dec	r24
    1156:	f1 f7       	brne	.-4      	; 0x1154 <LCD_init+0xa6>
	_delay_us(45);
	
	LCD_sendComnd(LCD_DESPLAY_CLEAR);
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	0e 94 21 08 	call	0x1042	; 0x1042 <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    115e:	af e3       	ldi	r26, 0x3F	; 63
    1160:	bf e1       	ldi	r27, 0x1F	; 31
    1162:	11 97       	sbiw	r26, 0x01	; 1
    1164:	f1 f7       	brne	.-4      	; 0x1162 <LCD_init+0xb4>
    1166:	00 c0       	rjmp	.+0      	; 0x1168 <LCD_init+0xba>
    1168:	00 00       	nop
	_delay_ms(2);
	
	LCD_sendComnd(LCD_ENTRY_MODE_SET);
    116a:	86 e0       	ldi	r24, 0x06	; 6
    116c:	0e 94 21 08 	call	0x1042	; 0x1042 <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1170:	b0 ef       	ldi	r27, 0xF0	; 240
    1172:	ba 95       	dec	r27
    1174:	f1 f7       	brne	.-4      	; 0x1172 <LCD_init+0xc4>
	_delay_us(45);

}
    1176:	08 95       	ret

00001178 <LCD_sendChar>:
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
}


void LCD_sendChar(u8 Character_Data)
{
    1178:	cf 93       	push	r28
    117a:	c8 2f       	mov	r28, r24
	DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_HIGH);
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	61 e0       	ldi	r22, 0x01	; 1
    1180:	41 e0       	ldi	r20, 0x01	; 1
    1182:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	62 e0       	ldi	r22, 0x02	; 2
    118a:	40 e0       	ldi	r20, 0x00	; 0
    118c:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
	
	private_WriteHalfPort(Character_Data>>4);                        //PORTA_REG= (PORTA_REG & 0x0f) | (Character_Data & 0xf0) 
    1190:	8c 2f       	mov	r24, r28
    1192:	82 95       	swap	r24
    1194:	8f 70       	andi	r24, 0x0F	; 15
    1196:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	63 e0       	ldi	r22, 0x03	; 3
    119e:	41 e0       	ldi	r20, 0x01	; 1
    11a0:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11a4:	8f e9       	ldi	r24, 0x9F	; 159
    11a6:	9f e0       	ldi	r25, 0x0F	; 15
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	f1 f7       	brne	.-4      	; 0x11a8 <LCD_sendChar+0x30>
    11ac:	00 c0       	rjmp	.+0      	; 0x11ae <LCD_sendChar+0x36>
    11ae:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	63 e0       	ldi	r22, 0x03	; 3
    11b4:	40 e0       	ldi	r20, 0x00	; 0
    11b6:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
	
	private_WriteHalfPort(Character_Data);                         //PORTA_REG= (PORTA_REG & 0x0f) | ((Character_Data & 0xf0) <<4)
    11ba:	8c 2f       	mov	r24, r28
    11bc:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	63 e0       	ldi	r22, 0x03	; 3
    11c4:	41 e0       	ldi	r20, 0x01	; 1
    11c6:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
    11ca:	8f e9       	ldi	r24, 0x9F	; 159
    11cc:	9f e0       	ldi	r25, 0x0F	; 15
    11ce:	01 97       	sbiw	r24, 0x01	; 1
    11d0:	f1 f7       	brne	.-4      	; 0x11ce <LCD_sendChar+0x56>
    11d2:	00 c0       	rjmp	.+0      	; 0x11d4 <LCD_sendChar+0x5c>
    11d4:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	63 e0       	ldi	r22, 0x03	; 3
    11da:	40 e0       	ldi	r20, 0x00	; 0
    11dc:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
}
    11e0:	cf 91       	pop	r28
    11e2:	08 95       	ret

000011e4 <LCD_SendString>:

void LCD_SendString (u8 *String_Data)
{
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
    11e8:	ec 01       	movw	r28, r24
	while((*String_Data)!='\0')
    11ea:	88 81       	ld	r24, Y
    11ec:	88 23       	and	r24, r24
    11ee:	31 f0       	breq	.+12     	; 0x11fc <LCD_SendString+0x18>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
}

void LCD_SendString (u8 *String_Data)
    11f0:	21 96       	adiw	r28, 0x01	; 1
{
	while((*String_Data)!='\0')
	{
		LCD_sendChar(*String_Data);
    11f2:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_sendChar>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
}

void LCD_SendString (u8 *String_Data)
{
	while((*String_Data)!='\0')
    11f6:	89 91       	ld	r24, Y+
    11f8:	88 23       	and	r24, r24
    11fa:	d9 f7       	brne	.-10     	; 0x11f2 <LCD_SendString+0xe>
	{
		LCD_sendChar(*String_Data);
		String_Data++;
	}
}
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	08 95       	ret

00001202 <LCD_ClearDesplay>:


void LCD_ClearDesplay()
{
	LCD_sendComnd (LCD_DESPLAY_CLEAR);		
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	0e 94 21 08 	call	0x1042	; 0x1042 <LCD_sendComnd>
    1208:	8f e3       	ldi	r24, 0x3F	; 63
    120a:	9f e1       	ldi	r25, 0x1F	; 31
    120c:	01 97       	sbiw	r24, 0x01	; 1
    120e:	f1 f7       	brne	.-4      	; 0x120c <LCD_ClearDesplay+0xa>
    1210:	00 c0       	rjmp	.+0      	; 0x1212 <LCD_ClearDesplay+0x10>
    1212:	00 00       	nop
	_delay_ms(2);
	LCD_sendComnd (LCD_Cursor_At_Home_position);		
    1214:	80 e8       	ldi	r24, 0x80	; 128
    1216:	0e 94 21 08 	call	0x1042	; 0x1042 <LCD_sendComnd>
}
    121a:	08 95       	ret

0000121c <LCD_GOTO_LOCATION>:

void LCD_GOTO_LOCATION(u8 X_Location, u8 Y_Location)
{
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	00 d0       	rcall	.+0      	; 0x1222 <LCD_GOTO_LOCATION+0x6>
    1222:	00 d0       	rcall	.+0      	; 0x1224 <LCD_GOTO_LOCATION+0x8>
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
	u8 FirstLocation[] = {0x80, 0xC0, 0x94, 0xD4};
    1228:	90 e8       	ldi	r25, 0x80	; 128
    122a:	99 83       	std	Y+1, r25	; 0x01
    122c:	90 ec       	ldi	r25, 0xC0	; 192
    122e:	9a 83       	std	Y+2, r25	; 0x02
    1230:	94 e9       	ldi	r25, 0x94	; 148
    1232:	9b 83       	std	Y+3, r25	; 0x03
    1234:	94 ed       	ldi	r25, 0xD4	; 212
    1236:	9c 83       	std	Y+4, r25	; 0x04
	LCD_sendComnd(FirstLocation[Y_Location-1] + X_Location-1);
    1238:	81 50       	subi	r24, 0x01	; 1
    123a:	fe 01       	movw	r30, r28
    123c:	e6 0f       	add	r30, r22
    123e:	f1 1d       	adc	r31, r1
    1240:	90 81       	ld	r25, Z
    1242:	89 0f       	add	r24, r25
    1244:	0e 94 21 08 	call	0x1042	; 0x1042 <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1248:	8f e9       	ldi	r24, 0x9F	; 159
    124a:	9f e0       	ldi	r25, 0x0F	; 15
    124c:	01 97       	sbiw	r24, 0x01	; 1
    124e:	f1 f7       	brne	.-4      	; 0x124c <LCD_GOTO_LOCATION+0x30>
    1250:	00 c0       	rjmp	.+0      	; 0x1252 <LCD_GOTO_LOCATION+0x36>
    1252:	00 00       	nop
	_delay_us(1000);
}
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	08 95       	ret

00001262 <LCD_SendIntegarNumber>:

void LCD_SendIntegarNumber(u16 IntegerNumber)
{
    1262:	0f 93       	push	r16
    1264:	1f 93       	push	r17
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	a0 97       	sbiw	r28, 0x20	; 32
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	de bf       	out	0x3e, r29	; 62
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	cd bf       	out	0x3d, r28	; 61
	u16 NumberString[16];
	snprintf(NumberString,17,"%d",IntegerNumber);    
    127a:	2d b7       	in	r18, 0x3d	; 61
    127c:	3e b7       	in	r19, 0x3e	; 62
    127e:	28 50       	subi	r18, 0x08	; 8
    1280:	30 40       	sbci	r19, 0x00	; 0
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	3e bf       	out	0x3e, r19	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	2d bf       	out	0x3d, r18	; 61
    128c:	ed b7       	in	r30, 0x3d	; 61
    128e:	fe b7       	in	r31, 0x3e	; 62
    1290:	31 96       	adiw	r30, 0x01	; 1
    1292:	8e 01       	movw	r16, r28
    1294:	0f 5f       	subi	r16, 0xFF	; 255
    1296:	1f 4f       	sbci	r17, 0xFF	; 255
    1298:	ad b7       	in	r26, 0x3d	; 61
    129a:	be b7       	in	r27, 0x3e	; 62
    129c:	12 96       	adiw	r26, 0x02	; 2
    129e:	1c 93       	st	X, r17
    12a0:	0e 93       	st	-X, r16
    12a2:	11 97       	sbiw	r26, 0x01	; 1
    12a4:	21 e1       	ldi	r18, 0x11	; 17
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	33 83       	std	Z+3, r19	; 0x03
    12aa:	22 83       	std	Z+2, r18	; 0x02
    12ac:	23 ea       	ldi	r18, 0xA3	; 163
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	35 83       	std	Z+5, r19	; 0x05
    12b2:	24 83       	std	Z+4, r18	; 0x04
    12b4:	97 83       	std	Z+7, r25	; 0x07
    12b6:	86 83       	std	Z+6, r24	; 0x06
    12b8:	0e 94 67 0b 	call	0x16ce	; 0x16ce <snprintf>
	LCD_SendString(NumberString);
    12bc:	2d b7       	in	r18, 0x3d	; 61
    12be:	3e b7       	in	r19, 0x3e	; 62
    12c0:	28 5f       	subi	r18, 0xF8	; 248
    12c2:	3f 4f       	sbci	r19, 0xFF	; 255
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	3e bf       	out	0x3e, r19	; 62
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	2d bf       	out	0x3d, r18	; 61
    12ce:	c8 01       	movw	r24, r16
    12d0:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <LCD_SendString>
}
    12d4:	a0 96       	adiw	r28, 0x20	; 32
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	f8 94       	cli
    12da:	de bf       	out	0x3e, r29	; 62
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	cd bf       	out	0x3d, r28	; 61
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	1f 91       	pop	r17
    12e6:	0f 91       	pop	r16
    12e8:	08 95       	ret

000012ea <LCD_SendNumberToLocation>:


void LCD_SendNumberToLocation(u16 Number,u8 X_Location, u8 Y_Location)
{
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	ec 01       	movw	r28, r24
    12f0:	86 2f       	mov	r24, r22
	LCD_GOTO_LOCATION(X_Location,Y_Location);
    12f2:	64 2f       	mov	r22, r20
    12f4:	0e 94 0e 09 	call	0x121c	; 0x121c <LCD_GOTO_LOCATION>
	LCD_SendIntegarNumber(Number);
    12f8:	ce 01       	movw	r24, r28
    12fa:	0e 94 31 09 	call	0x1262	; 0x1262 <LCD_SendIntegarNumber>
}
    12fe:	df 91       	pop	r29
    1300:	cf 91       	pop	r28
    1302:	08 95       	ret

00001304 <LCD_SendFloatNumber>:

void LCD_SendFloatNumber(f32 FloatNumber)
{
    1304:	0f 93       	push	r16
    1306:	1f 93       	push	r17
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
    1310:	a0 97       	sbiw	r28, 0x20	; 32
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	f8 94       	cli
    1316:	de bf       	out	0x3e, r29	; 62
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	cd bf       	out	0x3d, r28	; 61
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
	u16 NumberString[16];
	snprintf(NumberString,17,"%f",FloatNumber);
    1320:	2d b7       	in	r18, 0x3d	; 61
    1322:	3e b7       	in	r19, 0x3e	; 62
    1324:	2a 50       	subi	r18, 0x0A	; 10
    1326:	30 40       	sbci	r19, 0x00	; 0
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	f8 94       	cli
    132c:	3e bf       	out	0x3e, r19	; 62
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	2d bf       	out	0x3d, r18	; 61
    1332:	4d b7       	in	r20, 0x3d	; 61
    1334:	5e b7       	in	r21, 0x3e	; 62
    1336:	4f 5f       	subi	r20, 0xFF	; 255
    1338:	5f 4f       	sbci	r21, 0xFF	; 255
    133a:	8e 01       	movw	r16, r28
    133c:	0f 5f       	subi	r16, 0xFF	; 255
    133e:	1f 4f       	sbci	r17, 0xFF	; 255
    1340:	ed b7       	in	r30, 0x3d	; 61
    1342:	fe b7       	in	r31, 0x3e	; 62
    1344:	12 83       	std	Z+2, r17	; 0x02
    1346:	01 83       	std	Z+1, r16	; 0x01
    1348:	21 e1       	ldi	r18, 0x11	; 17
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	fa 01       	movw	r30, r20
    134e:	33 83       	std	Z+3, r19	; 0x03
    1350:	22 83       	std	Z+2, r18	; 0x02
    1352:	26 ea       	ldi	r18, 0xA6	; 166
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	35 83       	std	Z+5, r19	; 0x05
    1358:	24 83       	std	Z+4, r18	; 0x04
    135a:	86 83       	std	Z+6, r24	; 0x06
    135c:	97 83       	std	Z+7, r25	; 0x07
    135e:	a0 87       	std	Z+8, r26	; 0x08
    1360:	b1 87       	std	Z+9, r27	; 0x09
    1362:	0e 94 67 0b 	call	0x16ce	; 0x16ce <snprintf>
	LCD_SendString(NumberString);
    1366:	2d b7       	in	r18, 0x3d	; 61
    1368:	3e b7       	in	r19, 0x3e	; 62
    136a:	26 5f       	subi	r18, 0xF6	; 246
    136c:	3f 4f       	sbci	r19, 0xFF	; 255
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	f8 94       	cli
    1372:	3e bf       	out	0x3e, r19	; 62
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	2d bf       	out	0x3d, r18	; 61
    1378:	c8 01       	movw	r24, r16
    137a:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <LCD_SendString>
}
    137e:	a0 96       	adiw	r28, 0x20	; 32
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	f8 94       	cli
    1384:	de bf       	out	0x3e, r29	; 62
    1386:	0f be       	out	0x3f, r0	; 63
    1388:	cd bf       	out	0x3d, r28	; 61
    138a:	df 91       	pop	r29
    138c:	cf 91       	pop	r28
    138e:	1f 91       	pop	r17
    1390:	0f 91       	pop	r16
    1392:	08 95       	ret

00001394 <LCD_VidDataShiftLeft>:

void LCD_VidDataShiftLeft()
{
	LCD_sendComnd(LCD_SHIFTLEFT);
    1394:	88 e1       	ldi	r24, 0x18	; 24
    1396:	0e 94 21 08 	call	0x1042	; 0x1042 <LCD_sendComnd>
}
    139a:	08 95       	ret

0000139c <LCD_VidDataShiftRight>:

void LCD_VidDataShiftRight()
{
	LCD_sendComnd(LCD_SHIFTRIGHT);
    139c:	8c e1       	ldi	r24, 0x1C	; 28
    139e:	0e 94 21 08 	call	0x1042	; 0x1042 <LCD_sendComnd>
}
    13a2:	08 95       	ret

000013a4 <LCD_sendComnd_8BIT>:
}



void LCD_sendComnd_8BIT(u8 Cmnd)
{
    13a4:	cf 93       	push	r28
    13a6:	c8 2f       	mov	r28, r24
	DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	61 e0       	ldi	r22, 0x01	; 1
    13ac:	40 e0       	ldi	r20, 0x00	; 0
    13ae:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	62 e0       	ldi	r22, 0x02	; 2
    13b6:	40 e0       	ldi	r20, 0x00	; 0
    13b8:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
	
	DIO_setPortValue(LCD_PORT,Cmnd);
    13bc:	83 e0       	ldi	r24, 0x03	; 3
    13be:	6c 2f       	mov	r22, r28
    13c0:	0e 94 43 06 	call	0xc86	; 0xc86 <DIO_setPortValue>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	63 e0       	ldi	r22, 0x03	; 3
    13c8:	41 e0       	ldi	r20, 0x01	; 1
    13ca:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13ce:	8f e9       	ldi	r24, 0x9F	; 159
    13d0:	9f e0       	ldi	r25, 0x0F	; 15
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	f1 f7       	brne	.-4      	; 0x13d2 <LCD_sendComnd_8BIT+0x2e>
    13d6:	00 c0       	rjmp	.+0      	; 0x13d8 <LCD_sendComnd_8BIT+0x34>
    13d8:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	63 e0       	ldi	r22, 0x03	; 3
    13de:	40 e0       	ldi	r20, 0x00	; 0
    13e0:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
}
    13e4:	cf 91       	pop	r28
    13e6:	08 95       	ret

000013e8 <LCD_init_8bit>:


void LCD_init_8bit(void)
{
	//SET PIN AS OUTPUT
	DIO_SetPinDirection(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_OUTPUT);
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	61 e0       	ldi	r22, 0x01	; 1
    13ec:	41 e0       	ldi	r20, 0x01	; 1
    13ee:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_OUTPUT);
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	62 e0       	ldi	r22, 0x02	; 2
    13f6:	41 e0       	ldi	r20, 0x01	; 1
    13f8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_OUTPUT);
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	63 e0       	ldi	r22, 0x03	; 3
    1400:	41 e0       	ldi	r20, 0x01	; 1
    1402:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <DIO_SetPinDirection>
	
	DIO_setPortDirection(LCD_PORT,DIO_PORT_OUTPUT);
    1406:	83 e0       	ldi	r24, 0x03	; 3
    1408:	6f ef       	ldi	r22, 0xFF	; 255
    140a:	0e 94 08 06 	call	0xc10	; 0xc10 <DIO_setPortDirection>
    140e:	8f e7       	ldi	r24, 0x7F	; 127
    1410:	95 eb       	ldi	r25, 0xB5	; 181
    1412:	a1 e0       	ldi	r26, 0x01	; 1
    1414:	81 50       	subi	r24, 0x01	; 1
    1416:	90 40       	sbci	r25, 0x00	; 0
    1418:	a0 40       	sbci	r26, 0x00	; 0
    141a:	e1 f7       	brne	.-8      	; 0x1414 <LCD_init_8bit+0x2c>
    141c:	00 c0       	rjmp	.+0      	; 0x141e <LCD_init_8bit+0x36>
    141e:	00 00       	nop
	
	_delay_ms(35);
//     DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
//     DIO_SetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
	LCD_sendComnd_8BIT(LCD_FUNCTION_SET_8BIT);
    1420:	88 e3       	ldi	r24, 0x38	; 56
    1422:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <LCD_sendComnd_8BIT>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1426:	90 ef       	ldi	r25, 0xF0	; 240
    1428:	9a 95       	dec	r25
    142a:	f1 f7       	brne	.-4      	; 0x1428 <LCD_init_8bit+0x40>
	_delay_us(45);
	
	LCD_sendComnd_8BIT(LCD_DISPLAY_ON_OFF_CONTROL_8BIT);
    142c:	8f e0       	ldi	r24, 0x0F	; 15
    142e:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <LCD_sendComnd_8BIT>
    1432:	a0 ef       	ldi	r26, 0xF0	; 240
    1434:	aa 95       	dec	r26
    1436:	f1 f7       	brne	.-4      	; 0x1434 <LCD_init_8bit+0x4c>
	_delay_us(45);
	
	LCD_sendComnd_8BIT(LCD_DESPLAY_CLEAR_8BIT);
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <LCD_sendComnd_8BIT>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    143e:	8f e3       	ldi	r24, 0x3F	; 63
    1440:	9f e1       	ldi	r25, 0x1F	; 31
    1442:	01 97       	sbiw	r24, 0x01	; 1
    1444:	f1 f7       	brne	.-4      	; 0x1442 <LCD_init_8bit+0x5a>
    1446:	00 c0       	rjmp	.+0      	; 0x1448 <LCD_init_8bit+0x60>
    1448:	00 00       	nop
	_delay_ms(2);
	
	LCD_sendComnd_8BIT(LCD_ENTRY_MODE_SET_8BIT);
    144a:	86 e0       	ldi	r24, 0x06	; 6
    144c:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <LCD_sendComnd_8BIT>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1450:	90 ef       	ldi	r25, 0xF0	; 240
    1452:	9a 95       	dec	r25
    1454:	f1 f7       	brne	.-4      	; 0x1452 <LCD_init_8bit+0x6a>
	_delay_us(45);

}
    1456:	08 95       	ret

00001458 <LCD_sendChar_8BIT>:
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
}

void LCD_sendChar_8BIT(u8 Character_Data)
{
    1458:	cf 93       	push	r28
    145a:	c8 2f       	mov	r28, r24
	DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_HIGH);
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	61 e0       	ldi	r22, 0x01	; 1
    1460:	41 e0       	ldi	r20, 0x01	; 1
    1462:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	62 e0       	ldi	r22, 0x02	; 2
    146a:	40 e0       	ldi	r20, 0x00	; 0
    146c:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
	
	DIO_setPortValue(LCD_PORT,Character_Data);
    1470:	83 e0       	ldi	r24, 0x03	; 3
    1472:	6c 2f       	mov	r22, r28
    1474:	0e 94 43 06 	call	0xc86	; 0xc86 <DIO_setPortValue>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	63 e0       	ldi	r22, 0x03	; 3
    147c:	41 e0       	ldi	r20, 0x01	; 1
    147e:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1482:	8f e9       	ldi	r24, 0x9F	; 159
    1484:	9f e0       	ldi	r25, 0x0F	; 15
    1486:	01 97       	sbiw	r24, 0x01	; 1
    1488:	f1 f7       	brne	.-4      	; 0x1486 <LCD_sendChar_8BIT+0x2e>
    148a:	00 c0       	rjmp	.+0      	; 0x148c <LCD_sendChar_8BIT+0x34>
    148c:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	63 e0       	ldi	r22, 0x03	; 3
    1492:	40 e0       	ldi	r20, 0x00	; 0
    1494:	0e 94 82 04 	call	0x904	; 0x904 <DIO_SetPinValue>
}
    1498:	cf 91       	pop	r28
    149a:	08 95       	ret

0000149c <LCD_SendString_8BIT>:

void LCD_SendString_8BIT (u8 *String_Data)
{
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	ec 01       	movw	r28, r24
	while((*String_Data)!='\0')
    14a2:	88 81       	ld	r24, Y
    14a4:	88 23       	and	r24, r24
    14a6:	31 f0       	breq	.+12     	; 0x14b4 <LCD_SendString_8BIT+0x18>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
}

void LCD_SendString_8BIT (u8 *String_Data)
    14a8:	21 96       	adiw	r28, 0x01	; 1
{
	while((*String_Data)!='\0')
	{
		LCD_sendChar_8BIT(*String_Data);
    14aa:	0e 94 2c 0a 	call	0x1458	; 0x1458 <LCD_sendChar_8BIT>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
}

void LCD_SendString_8BIT (u8 *String_Data)
{
	while((*String_Data)!='\0')
    14ae:	89 91       	ld	r24, Y+
    14b0:	88 23       	and	r24, r24
    14b2:	d9 f7       	brne	.-10     	; 0x14aa <LCD_SendString_8BIT+0xe>
	{
		LCD_sendChar_8BIT(*String_Data);
		String_Data++;
	}
}
    14b4:	df 91       	pop	r29
    14b6:	cf 91       	pop	r28
    14b8:	08 95       	ret

000014ba <LCD_ClearDesplay_8BIT>:

void LCD_ClearDesplay_8BIT ()
{
	LCD_sendComnd_8BIT (LCD_DESPLAY_CLEAR);
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <LCD_sendComnd_8BIT>
    14c0:	8f e3       	ldi	r24, 0x3F	; 63
    14c2:	9f e1       	ldi	r25, 0x1F	; 31
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	f1 f7       	brne	.-4      	; 0x14c4 <LCD_ClearDesplay_8BIT+0xa>
    14c8:	00 c0       	rjmp	.+0      	; 0x14ca <LCD_ClearDesplay_8BIT+0x10>
    14ca:	00 00       	nop
	_delay_ms(2);
	LCD_sendComnd_8BIT (LCD_Cursor_At_Home_position);
    14cc:	80 e8       	ldi	r24, 0x80	; 128
    14ce:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <LCD_sendComnd_8BIT>
}
    14d2:	08 95       	ret

000014d4 <LCD_GOTO_LOCATION_8BIT>:

void LCD_GOTO_LOCATION_8BIT(u8 X_Location, u8 Y_Location)
{
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	00 d0       	rcall	.+0      	; 0x14da <LCD_GOTO_LOCATION_8BIT+0x6>
    14da:	00 d0       	rcall	.+0      	; 0x14dc <LCD_GOTO_LOCATION_8BIT+0x8>
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
	u8 FirstLocation[] = {0x80, 0xC0, 0x94, 0xD4};
    14e0:	90 e8       	ldi	r25, 0x80	; 128
    14e2:	99 83       	std	Y+1, r25	; 0x01
    14e4:	90 ec       	ldi	r25, 0xC0	; 192
    14e6:	9a 83       	std	Y+2, r25	; 0x02
    14e8:	94 e9       	ldi	r25, 0x94	; 148
    14ea:	9b 83       	std	Y+3, r25	; 0x03
    14ec:	94 ed       	ldi	r25, 0xD4	; 212
    14ee:	9c 83       	std	Y+4, r25	; 0x04
	LCD_sendComnd_8BIT(FirstLocation[Y_Location-1] + X_Location-1);
    14f0:	81 50       	subi	r24, 0x01	; 1
    14f2:	fe 01       	movw	r30, r28
    14f4:	e6 0f       	add	r30, r22
    14f6:	f1 1d       	adc	r31, r1
    14f8:	90 81       	ld	r25, Z
    14fa:	89 0f       	add	r24, r25
    14fc:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <LCD_sendComnd_8BIT>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1500:	8f e9       	ldi	r24, 0x9F	; 159
    1502:	9f e0       	ldi	r25, 0x0F	; 15
    1504:	01 97       	sbiw	r24, 0x01	; 1
    1506:	f1 f7       	brne	.-4      	; 0x1504 <LCD_GOTO_LOCATION_8BIT+0x30>
    1508:	00 c0       	rjmp	.+0      	; 0x150a <LCD_GOTO_LOCATION_8BIT+0x36>
    150a:	00 00       	nop
	_delay_us(1000);
}
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	08 95       	ret

0000151a <LCD_SendIntegarNumber_8BIT>:

void LCD_SendIntegarNumber_8BIT(u16 IntegerNumber)
{
    151a:	0f 93       	push	r16
    151c:	1f 93       	push	r17
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    1526:	a0 97       	sbiw	r28, 0x20	; 32
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	de bf       	out	0x3e, r29	; 62
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	cd bf       	out	0x3d, r28	; 61
	u16 NumberString[16];
	snprintf(NumberString,17,"%d",IntegerNumber);
    1532:	2d b7       	in	r18, 0x3d	; 61
    1534:	3e b7       	in	r19, 0x3e	; 62
    1536:	28 50       	subi	r18, 0x08	; 8
    1538:	30 40       	sbci	r19, 0x00	; 0
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	3e bf       	out	0x3e, r19	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	2d bf       	out	0x3d, r18	; 61
    1544:	ed b7       	in	r30, 0x3d	; 61
    1546:	fe b7       	in	r31, 0x3e	; 62
    1548:	31 96       	adiw	r30, 0x01	; 1
    154a:	8e 01       	movw	r16, r28
    154c:	0f 5f       	subi	r16, 0xFF	; 255
    154e:	1f 4f       	sbci	r17, 0xFF	; 255
    1550:	ad b7       	in	r26, 0x3d	; 61
    1552:	be b7       	in	r27, 0x3e	; 62
    1554:	12 96       	adiw	r26, 0x02	; 2
    1556:	1c 93       	st	X, r17
    1558:	0e 93       	st	-X, r16
    155a:	11 97       	sbiw	r26, 0x01	; 1
    155c:	21 e1       	ldi	r18, 0x11	; 17
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	33 83       	std	Z+3, r19	; 0x03
    1562:	22 83       	std	Z+2, r18	; 0x02
    1564:	23 ea       	ldi	r18, 0xA3	; 163
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	35 83       	std	Z+5, r19	; 0x05
    156a:	24 83       	std	Z+4, r18	; 0x04
    156c:	97 83       	std	Z+7, r25	; 0x07
    156e:	86 83       	std	Z+6, r24	; 0x06
    1570:	0e 94 67 0b 	call	0x16ce	; 0x16ce <snprintf>
	LCD_SendString_8BIT(NumberString);
    1574:	2d b7       	in	r18, 0x3d	; 61
    1576:	3e b7       	in	r19, 0x3e	; 62
    1578:	28 5f       	subi	r18, 0xF8	; 248
    157a:	3f 4f       	sbci	r19, 0xFF	; 255
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	f8 94       	cli
    1580:	3e bf       	out	0x3e, r19	; 62
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	2d bf       	out	0x3d, r18	; 61
    1586:	c8 01       	movw	r24, r16
    1588:	0e 94 4e 0a 	call	0x149c	; 0x149c <LCD_SendString_8BIT>
}
    158c:	a0 96       	adiw	r28, 0x20	; 32
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28
    159c:	1f 91       	pop	r17
    159e:	0f 91       	pop	r16
    15a0:	08 95       	ret

000015a2 <LCD_SendNumberToLocation_8BIT>:


void LCD_SendNumberToLocation_8BIT(u16 Number,u8 X_Location, u8 Y_Location)
{
    15a2:	cf 93       	push	r28
    15a4:	df 93       	push	r29
    15a6:	ec 01       	movw	r28, r24
    15a8:	86 2f       	mov	r24, r22
	LCD_GOTO_LOCATION(X_Location,Y_Location);
    15aa:	64 2f       	mov	r22, r20
    15ac:	0e 94 0e 09 	call	0x121c	; 0x121c <LCD_GOTO_LOCATION>
	LCD_SendIntegarNumber_8BIT(Number);
    15b0:	ce 01       	movw	r24, r28
    15b2:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_SendIntegarNumber_8BIT>
}
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	08 95       	ret

000015bc <LCD_SendFloatNumber_8BIT>:

void LCD_SendFloatNumber_8BIT(f32 FloatNumber)
{
    15bc:	0f 93       	push	r16
    15be:	1f 93       	push	r17
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	a0 97       	sbiw	r28, 0x20	; 32
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	f8 94       	cli
    15ce:	de bf       	out	0x3e, r29	; 62
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	cd bf       	out	0x3d, r28	; 61
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
	u16 NumberString[16];
	snprintf(NumberString,17,"%f",FloatNumber);
    15d8:	2d b7       	in	r18, 0x3d	; 61
    15da:	3e b7       	in	r19, 0x3e	; 62
    15dc:	2a 50       	subi	r18, 0x0A	; 10
    15de:	30 40       	sbci	r19, 0x00	; 0
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	3e bf       	out	0x3e, r19	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	2d bf       	out	0x3d, r18	; 61
    15ea:	4d b7       	in	r20, 0x3d	; 61
    15ec:	5e b7       	in	r21, 0x3e	; 62
    15ee:	4f 5f       	subi	r20, 0xFF	; 255
    15f0:	5f 4f       	sbci	r21, 0xFF	; 255
    15f2:	8e 01       	movw	r16, r28
    15f4:	0f 5f       	subi	r16, 0xFF	; 255
    15f6:	1f 4f       	sbci	r17, 0xFF	; 255
    15f8:	ed b7       	in	r30, 0x3d	; 61
    15fa:	fe b7       	in	r31, 0x3e	; 62
    15fc:	12 83       	std	Z+2, r17	; 0x02
    15fe:	01 83       	std	Z+1, r16	; 0x01
    1600:	21 e1       	ldi	r18, 0x11	; 17
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	fa 01       	movw	r30, r20
    1606:	33 83       	std	Z+3, r19	; 0x03
    1608:	22 83       	std	Z+2, r18	; 0x02
    160a:	26 ea       	ldi	r18, 0xA6	; 166
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	35 83       	std	Z+5, r19	; 0x05
    1610:	24 83       	std	Z+4, r18	; 0x04
    1612:	86 83       	std	Z+6, r24	; 0x06
    1614:	97 83       	std	Z+7, r25	; 0x07
    1616:	a0 87       	std	Z+8, r26	; 0x08
    1618:	b1 87       	std	Z+9, r27	; 0x09
    161a:	0e 94 67 0b 	call	0x16ce	; 0x16ce <snprintf>
	LCD_SendString_8BIT(NumberString);
    161e:	2d b7       	in	r18, 0x3d	; 61
    1620:	3e b7       	in	r19, 0x3e	; 62
    1622:	26 5f       	subi	r18, 0xF6	; 246
    1624:	3f 4f       	sbci	r19, 0xFF	; 255
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	3e bf       	out	0x3e, r19	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	2d bf       	out	0x3d, r18	; 61
    1630:	c8 01       	movw	r24, r16
    1632:	0e 94 4e 0a 	call	0x149c	; 0x149c <LCD_SendString_8BIT>
    1636:	a0 96       	adiw	r28, 0x20	; 32
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	f8 94       	cli
    163c:	de bf       	out	0x3e, r29	; 62
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	cd bf       	out	0x3d, r28	; 61
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	1f 91       	pop	r17
    1648:	0f 91       	pop	r16
    164a:	08 95       	ret

0000164c <__mulsi3>:
    164c:	62 9f       	mul	r22, r18
    164e:	d0 01       	movw	r26, r0
    1650:	73 9f       	mul	r23, r19
    1652:	f0 01       	movw	r30, r0
    1654:	82 9f       	mul	r24, r18
    1656:	e0 0d       	add	r30, r0
    1658:	f1 1d       	adc	r31, r1
    165a:	64 9f       	mul	r22, r20
    165c:	e0 0d       	add	r30, r0
    165e:	f1 1d       	adc	r31, r1
    1660:	92 9f       	mul	r25, r18
    1662:	f0 0d       	add	r31, r0
    1664:	83 9f       	mul	r24, r19
    1666:	f0 0d       	add	r31, r0
    1668:	74 9f       	mul	r23, r20
    166a:	f0 0d       	add	r31, r0
    166c:	65 9f       	mul	r22, r21
    166e:	f0 0d       	add	r31, r0
    1670:	99 27       	eor	r25, r25
    1672:	72 9f       	mul	r23, r18
    1674:	b0 0d       	add	r27, r0
    1676:	e1 1d       	adc	r30, r1
    1678:	f9 1f       	adc	r31, r25
    167a:	63 9f       	mul	r22, r19
    167c:	b0 0d       	add	r27, r0
    167e:	e1 1d       	adc	r30, r1
    1680:	f9 1f       	adc	r31, r25
    1682:	bd 01       	movw	r22, r26
    1684:	cf 01       	movw	r24, r30
    1686:	11 24       	eor	r1, r1
    1688:	08 95       	ret

0000168a <__udivmodsi4>:
    168a:	a1 e2       	ldi	r26, 0x21	; 33
    168c:	1a 2e       	mov	r1, r26
    168e:	aa 1b       	sub	r26, r26
    1690:	bb 1b       	sub	r27, r27
    1692:	fd 01       	movw	r30, r26
    1694:	0d c0       	rjmp	.+26     	; 0x16b0 <__udivmodsi4_ep>

00001696 <__udivmodsi4_loop>:
    1696:	aa 1f       	adc	r26, r26
    1698:	bb 1f       	adc	r27, r27
    169a:	ee 1f       	adc	r30, r30
    169c:	ff 1f       	adc	r31, r31
    169e:	a2 17       	cp	r26, r18
    16a0:	b3 07       	cpc	r27, r19
    16a2:	e4 07       	cpc	r30, r20
    16a4:	f5 07       	cpc	r31, r21
    16a6:	20 f0       	brcs	.+8      	; 0x16b0 <__udivmodsi4_ep>
    16a8:	a2 1b       	sub	r26, r18
    16aa:	b3 0b       	sbc	r27, r19
    16ac:	e4 0b       	sbc	r30, r20
    16ae:	f5 0b       	sbc	r31, r21

000016b0 <__udivmodsi4_ep>:
    16b0:	66 1f       	adc	r22, r22
    16b2:	77 1f       	adc	r23, r23
    16b4:	88 1f       	adc	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	1a 94       	dec	r1
    16ba:	69 f7       	brne	.-38     	; 0x1696 <__udivmodsi4_loop>
    16bc:	60 95       	com	r22
    16be:	70 95       	com	r23
    16c0:	80 95       	com	r24
    16c2:	90 95       	com	r25
    16c4:	9b 01       	movw	r18, r22
    16c6:	ac 01       	movw	r20, r24
    16c8:	bd 01       	movw	r22, r26
    16ca:	cf 01       	movw	r24, r30
    16cc:	08 95       	ret

000016ce <snprintf>:
    16ce:	ae e0       	ldi	r26, 0x0E	; 14
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	ed e6       	ldi	r30, 0x6D	; 109
    16d4:	fb e0       	ldi	r31, 0x0B	; 11
    16d6:	0c 94 23 0e 	jmp	0x1c46	; 0x1c46 <__prologue_saves__+0x1c>
    16da:	0d 89       	ldd	r16, Y+21	; 0x15
    16dc:	1e 89       	ldd	r17, Y+22	; 0x16
    16de:	8f 89       	ldd	r24, Y+23	; 0x17
    16e0:	98 8d       	ldd	r25, Y+24	; 0x18
    16e2:	26 e0       	ldi	r18, 0x06	; 6
    16e4:	2c 83       	std	Y+4, r18	; 0x04
    16e6:	1a 83       	std	Y+2, r17	; 0x02
    16e8:	09 83       	std	Y+1, r16	; 0x01
    16ea:	97 ff       	sbrs	r25, 7
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <snprintf+0x24>
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	90 e8       	ldi	r25, 0x80	; 128
    16f2:	01 97       	sbiw	r24, 0x01	; 1
    16f4:	9e 83       	std	Y+6, r25	; 0x06
    16f6:	8d 83       	std	Y+5, r24	; 0x05
    16f8:	ae 01       	movw	r20, r28
    16fa:	45 5e       	subi	r20, 0xE5	; 229
    16fc:	5f 4f       	sbci	r21, 0xFF	; 255
    16fe:	ce 01       	movw	r24, r28
    1700:	01 96       	adiw	r24, 0x01	; 1
    1702:	69 8d       	ldd	r22, Y+25	; 0x19
    1704:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1706:	0e 94 97 0b 	call	0x172e	; 0x172e <vfprintf>
    170a:	4d 81       	ldd	r20, Y+5	; 0x05
    170c:	5e 81       	ldd	r21, Y+6	; 0x06
    170e:	57 fd       	sbrc	r21, 7
    1710:	0a c0       	rjmp	.+20     	; 0x1726 <snprintf+0x58>
    1712:	2f 81       	ldd	r18, Y+7	; 0x07
    1714:	38 85       	ldd	r19, Y+8	; 0x08
    1716:	42 17       	cp	r20, r18
    1718:	53 07       	cpc	r21, r19
    171a:	0c f4       	brge	.+2      	; 0x171e <snprintf+0x50>
    171c:	9a 01       	movw	r18, r20
    171e:	02 0f       	add	r16, r18
    1720:	13 1f       	adc	r17, r19
    1722:	f8 01       	movw	r30, r16
    1724:	10 82       	st	Z, r1
    1726:	2e 96       	adiw	r28, 0x0e	; 14
    1728:	e4 e0       	ldi	r30, 0x04	; 4
    172a:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <__epilogue_restores__+0x1c>

0000172e <vfprintf>:
    172e:	ad e0       	ldi	r26, 0x0D	; 13
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	ed e9       	ldi	r30, 0x9D	; 157
    1734:	fb e0       	ldi	r31, 0x0B	; 11
    1736:	0c 94 15 0e 	jmp	0x1c2a	; 0x1c2a <__prologue_saves__>
    173a:	3c 01       	movw	r6, r24
    173c:	7d 87       	std	Y+13, r23	; 0x0d
    173e:	6c 87       	std	Y+12, r22	; 0x0c
    1740:	5a 01       	movw	r10, r20
    1742:	fc 01       	movw	r30, r24
    1744:	17 82       	std	Z+7, r1	; 0x07
    1746:	16 82       	std	Z+6, r1	; 0x06
    1748:	83 81       	ldd	r24, Z+3	; 0x03
    174a:	81 ff       	sbrs	r24, 1
    174c:	c8 c1       	rjmp	.+912    	; 0x1ade <vfprintf+0x3b0>
    174e:	2e 01       	movw	r4, r28
    1750:	08 94       	sec
    1752:	41 1c       	adc	r4, r1
    1754:	51 1c       	adc	r5, r1
    1756:	f3 01       	movw	r30, r6
    1758:	93 81       	ldd	r25, Z+3	; 0x03
    175a:	ec 85       	ldd	r30, Y+12	; 0x0c
    175c:	fd 85       	ldd	r31, Y+13	; 0x0d
    175e:	93 fd       	sbrc	r25, 3
    1760:	85 91       	lpm	r24, Z+
    1762:	93 ff       	sbrs	r25, 3
    1764:	81 91       	ld	r24, Z+
    1766:	fd 87       	std	Y+13, r31	; 0x0d
    1768:	ec 87       	std	Y+12, r30	; 0x0c
    176a:	88 23       	and	r24, r24
    176c:	09 f4       	brne	.+2      	; 0x1770 <vfprintf+0x42>
    176e:	b3 c1       	rjmp	.+870    	; 0x1ad6 <vfprintf+0x3a8>
    1770:	85 32       	cpi	r24, 0x25	; 37
    1772:	41 f4       	brne	.+16     	; 0x1784 <vfprintf+0x56>
    1774:	93 fd       	sbrc	r25, 3
    1776:	85 91       	lpm	r24, Z+
    1778:	93 ff       	sbrs	r25, 3
    177a:	81 91       	ld	r24, Z+
    177c:	fd 87       	std	Y+13, r31	; 0x0d
    177e:	ec 87       	std	Y+12, r30	; 0x0c
    1780:	85 32       	cpi	r24, 0x25	; 37
    1782:	29 f4       	brne	.+10     	; 0x178e <vfprintf+0x60>
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	b3 01       	movw	r22, r6
    1788:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <fputc>
    178c:	e4 cf       	rjmp	.-56     	; 0x1756 <vfprintf+0x28>
    178e:	ff 24       	eor	r15, r15
    1790:	ee 24       	eor	r14, r14
    1792:	10 e0       	ldi	r17, 0x00	; 0
    1794:	10 32       	cpi	r17, 0x20	; 32
    1796:	b0 f4       	brcc	.+44     	; 0x17c4 <vfprintf+0x96>
    1798:	8b 32       	cpi	r24, 0x2B	; 43
    179a:	69 f0       	breq	.+26     	; 0x17b6 <vfprintf+0x88>
    179c:	8c 32       	cpi	r24, 0x2C	; 44
    179e:	28 f4       	brcc	.+10     	; 0x17aa <vfprintf+0x7c>
    17a0:	80 32       	cpi	r24, 0x20	; 32
    17a2:	51 f0       	breq	.+20     	; 0x17b8 <vfprintf+0x8a>
    17a4:	83 32       	cpi	r24, 0x23	; 35
    17a6:	71 f4       	brne	.+28     	; 0x17c4 <vfprintf+0x96>
    17a8:	0b c0       	rjmp	.+22     	; 0x17c0 <vfprintf+0x92>
    17aa:	8d 32       	cpi	r24, 0x2D	; 45
    17ac:	39 f0       	breq	.+14     	; 0x17bc <vfprintf+0x8e>
    17ae:	80 33       	cpi	r24, 0x30	; 48
    17b0:	49 f4       	brne	.+18     	; 0x17c4 <vfprintf+0x96>
    17b2:	11 60       	ori	r17, 0x01	; 1
    17b4:	2c c0       	rjmp	.+88     	; 0x180e <vfprintf+0xe0>
    17b6:	12 60       	ori	r17, 0x02	; 2
    17b8:	14 60       	ori	r17, 0x04	; 4
    17ba:	29 c0       	rjmp	.+82     	; 0x180e <vfprintf+0xe0>
    17bc:	18 60       	ori	r17, 0x08	; 8
    17be:	27 c0       	rjmp	.+78     	; 0x180e <vfprintf+0xe0>
    17c0:	10 61       	ori	r17, 0x10	; 16
    17c2:	25 c0       	rjmp	.+74     	; 0x180e <vfprintf+0xe0>
    17c4:	17 fd       	sbrc	r17, 7
    17c6:	2e c0       	rjmp	.+92     	; 0x1824 <vfprintf+0xf6>
    17c8:	28 2f       	mov	r18, r24
    17ca:	20 53       	subi	r18, 0x30	; 48
    17cc:	2a 30       	cpi	r18, 0x0A	; 10
    17ce:	98 f4       	brcc	.+38     	; 0x17f6 <vfprintf+0xc8>
    17d0:	16 ff       	sbrs	r17, 6
    17d2:	08 c0       	rjmp	.+16     	; 0x17e4 <vfprintf+0xb6>
    17d4:	8f 2d       	mov	r24, r15
    17d6:	88 0f       	add	r24, r24
    17d8:	f8 2e       	mov	r15, r24
    17da:	ff 0c       	add	r15, r15
    17dc:	ff 0c       	add	r15, r15
    17de:	f8 0e       	add	r15, r24
    17e0:	f2 0e       	add	r15, r18
    17e2:	15 c0       	rjmp	.+42     	; 0x180e <vfprintf+0xe0>
    17e4:	8e 2d       	mov	r24, r14
    17e6:	88 0f       	add	r24, r24
    17e8:	e8 2e       	mov	r14, r24
    17ea:	ee 0c       	add	r14, r14
    17ec:	ee 0c       	add	r14, r14
    17ee:	e8 0e       	add	r14, r24
    17f0:	e2 0e       	add	r14, r18
    17f2:	10 62       	ori	r17, 0x20	; 32
    17f4:	0c c0       	rjmp	.+24     	; 0x180e <vfprintf+0xe0>
    17f6:	8e 32       	cpi	r24, 0x2E	; 46
    17f8:	21 f4       	brne	.+8      	; 0x1802 <vfprintf+0xd4>
    17fa:	16 fd       	sbrc	r17, 6
    17fc:	6c c1       	rjmp	.+728    	; 0x1ad6 <vfprintf+0x3a8>
    17fe:	10 64       	ori	r17, 0x40	; 64
    1800:	06 c0       	rjmp	.+12     	; 0x180e <vfprintf+0xe0>
    1802:	8c 36       	cpi	r24, 0x6C	; 108
    1804:	11 f4       	brne	.+4      	; 0x180a <vfprintf+0xdc>
    1806:	10 68       	ori	r17, 0x80	; 128
    1808:	02 c0       	rjmp	.+4      	; 0x180e <vfprintf+0xe0>
    180a:	88 36       	cpi	r24, 0x68	; 104
    180c:	59 f4       	brne	.+22     	; 0x1824 <vfprintf+0xf6>
    180e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1810:	fd 85       	ldd	r31, Y+13	; 0x0d
    1812:	93 fd       	sbrc	r25, 3
    1814:	85 91       	lpm	r24, Z+
    1816:	93 ff       	sbrs	r25, 3
    1818:	81 91       	ld	r24, Z+
    181a:	fd 87       	std	Y+13, r31	; 0x0d
    181c:	ec 87       	std	Y+12, r30	; 0x0c
    181e:	88 23       	and	r24, r24
    1820:	09 f0       	breq	.+2      	; 0x1824 <vfprintf+0xf6>
    1822:	b8 cf       	rjmp	.-144    	; 0x1794 <vfprintf+0x66>
    1824:	98 2f       	mov	r25, r24
    1826:	95 54       	subi	r25, 0x45	; 69
    1828:	93 30       	cpi	r25, 0x03	; 3
    182a:	18 f0       	brcs	.+6      	; 0x1832 <vfprintf+0x104>
    182c:	90 52       	subi	r25, 0x20	; 32
    182e:	93 30       	cpi	r25, 0x03	; 3
    1830:	38 f4       	brcc	.+14     	; 0x1840 <vfprintf+0x112>
    1832:	24 e0       	ldi	r18, 0x04	; 4
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	a2 0e       	add	r10, r18
    1838:	b3 1e       	adc	r11, r19
    183a:	3f e3       	ldi	r19, 0x3F	; 63
    183c:	39 83       	std	Y+1, r19	; 0x01
    183e:	0f c0       	rjmp	.+30     	; 0x185e <vfprintf+0x130>
    1840:	83 36       	cpi	r24, 0x63	; 99
    1842:	31 f0       	breq	.+12     	; 0x1850 <vfprintf+0x122>
    1844:	83 37       	cpi	r24, 0x73	; 115
    1846:	81 f0       	breq	.+32     	; 0x1868 <vfprintf+0x13a>
    1848:	83 35       	cpi	r24, 0x53	; 83
    184a:	09 f0       	breq	.+2      	; 0x184e <vfprintf+0x120>
    184c:	5a c0       	rjmp	.+180    	; 0x1902 <vfprintf+0x1d4>
    184e:	22 c0       	rjmp	.+68     	; 0x1894 <vfprintf+0x166>
    1850:	f5 01       	movw	r30, r10
    1852:	80 81       	ld	r24, Z
    1854:	89 83       	std	Y+1, r24	; 0x01
    1856:	22 e0       	ldi	r18, 0x02	; 2
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	a2 0e       	add	r10, r18
    185c:	b3 1e       	adc	r11, r19
    185e:	21 e0       	ldi	r18, 0x01	; 1
    1860:	c2 2e       	mov	r12, r18
    1862:	d1 2c       	mov	r13, r1
    1864:	42 01       	movw	r8, r4
    1866:	14 c0       	rjmp	.+40     	; 0x1890 <vfprintf+0x162>
    1868:	92 e0       	ldi	r25, 0x02	; 2
    186a:	29 2e       	mov	r2, r25
    186c:	31 2c       	mov	r3, r1
    186e:	2a 0c       	add	r2, r10
    1870:	3b 1c       	adc	r3, r11
    1872:	f5 01       	movw	r30, r10
    1874:	80 80       	ld	r8, Z
    1876:	91 80       	ldd	r9, Z+1	; 0x01
    1878:	16 ff       	sbrs	r17, 6
    187a:	03 c0       	rjmp	.+6      	; 0x1882 <vfprintf+0x154>
    187c:	6f 2d       	mov	r22, r15
    187e:	70 e0       	ldi	r23, 0x00	; 0
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <vfprintf+0x158>
    1882:	6f ef       	ldi	r22, 0xFF	; 255
    1884:	7f ef       	ldi	r23, 0xFF	; 255
    1886:	c4 01       	movw	r24, r8
    1888:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <strnlen>
    188c:	6c 01       	movw	r12, r24
    188e:	51 01       	movw	r10, r2
    1890:	1f 77       	andi	r17, 0x7F	; 127
    1892:	15 c0       	rjmp	.+42     	; 0x18be <vfprintf+0x190>
    1894:	82 e0       	ldi	r24, 0x02	; 2
    1896:	28 2e       	mov	r2, r24
    1898:	31 2c       	mov	r3, r1
    189a:	2a 0c       	add	r2, r10
    189c:	3b 1c       	adc	r3, r11
    189e:	f5 01       	movw	r30, r10
    18a0:	80 80       	ld	r8, Z
    18a2:	91 80       	ldd	r9, Z+1	; 0x01
    18a4:	16 ff       	sbrs	r17, 6
    18a6:	03 c0       	rjmp	.+6      	; 0x18ae <vfprintf+0x180>
    18a8:	6f 2d       	mov	r22, r15
    18aa:	70 e0       	ldi	r23, 0x00	; 0
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <vfprintf+0x184>
    18ae:	6f ef       	ldi	r22, 0xFF	; 255
    18b0:	7f ef       	ldi	r23, 0xFF	; 255
    18b2:	c4 01       	movw	r24, r8
    18b4:	0e 94 75 0d 	call	0x1aea	; 0x1aea <strnlen_P>
    18b8:	6c 01       	movw	r12, r24
    18ba:	10 68       	ori	r17, 0x80	; 128
    18bc:	51 01       	movw	r10, r2
    18be:	13 fd       	sbrc	r17, 3
    18c0:	1c c0       	rjmp	.+56     	; 0x18fa <vfprintf+0x1cc>
    18c2:	06 c0       	rjmp	.+12     	; 0x18d0 <vfprintf+0x1a2>
    18c4:	80 e2       	ldi	r24, 0x20	; 32
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	b3 01       	movw	r22, r6
    18ca:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <fputc>
    18ce:	ea 94       	dec	r14
    18d0:	8e 2d       	mov	r24, r14
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	c8 16       	cp	r12, r24
    18d6:	d9 06       	cpc	r13, r25
    18d8:	a8 f3       	brcs	.-22     	; 0x18c4 <vfprintf+0x196>
    18da:	0f c0       	rjmp	.+30     	; 0x18fa <vfprintf+0x1cc>
    18dc:	f4 01       	movw	r30, r8
    18de:	17 fd       	sbrc	r17, 7
    18e0:	85 91       	lpm	r24, Z+
    18e2:	17 ff       	sbrs	r17, 7
    18e4:	81 91       	ld	r24, Z+
    18e6:	4f 01       	movw	r8, r30
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	b3 01       	movw	r22, r6
    18ec:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <fputc>
    18f0:	e1 10       	cpse	r14, r1
    18f2:	ea 94       	dec	r14
    18f4:	08 94       	sec
    18f6:	c1 08       	sbc	r12, r1
    18f8:	d1 08       	sbc	r13, r1
    18fa:	c1 14       	cp	r12, r1
    18fc:	d1 04       	cpc	r13, r1
    18fe:	71 f7       	brne	.-36     	; 0x18dc <vfprintf+0x1ae>
    1900:	e7 c0       	rjmp	.+462    	; 0x1ad0 <vfprintf+0x3a2>
    1902:	84 36       	cpi	r24, 0x64	; 100
    1904:	11 f0       	breq	.+4      	; 0x190a <vfprintf+0x1dc>
    1906:	89 36       	cpi	r24, 0x69	; 105
    1908:	51 f5       	brne	.+84     	; 0x195e <vfprintf+0x230>
    190a:	f5 01       	movw	r30, r10
    190c:	17 ff       	sbrs	r17, 7
    190e:	07 c0       	rjmp	.+14     	; 0x191e <vfprintf+0x1f0>
    1910:	80 81       	ld	r24, Z
    1912:	91 81       	ldd	r25, Z+1	; 0x01
    1914:	a2 81       	ldd	r26, Z+2	; 0x02
    1916:	b3 81       	ldd	r27, Z+3	; 0x03
    1918:	24 e0       	ldi	r18, 0x04	; 4
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	08 c0       	rjmp	.+16     	; 0x192e <vfprintf+0x200>
    191e:	80 81       	ld	r24, Z
    1920:	91 81       	ldd	r25, Z+1	; 0x01
    1922:	aa 27       	eor	r26, r26
    1924:	97 fd       	sbrc	r25, 7
    1926:	a0 95       	com	r26
    1928:	ba 2f       	mov	r27, r26
    192a:	22 e0       	ldi	r18, 0x02	; 2
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	a2 0e       	add	r10, r18
    1930:	b3 1e       	adc	r11, r19
    1932:	01 2f       	mov	r16, r17
    1934:	0f 76       	andi	r16, 0x6F	; 111
    1936:	b7 ff       	sbrs	r27, 7
    1938:	08 c0       	rjmp	.+16     	; 0x194a <vfprintf+0x21c>
    193a:	b0 95       	com	r27
    193c:	a0 95       	com	r26
    193e:	90 95       	com	r25
    1940:	81 95       	neg	r24
    1942:	9f 4f       	sbci	r25, 0xFF	; 255
    1944:	af 4f       	sbci	r26, 0xFF	; 255
    1946:	bf 4f       	sbci	r27, 0xFF	; 255
    1948:	00 68       	ori	r16, 0x80	; 128
    194a:	bc 01       	movw	r22, r24
    194c:	cd 01       	movw	r24, r26
    194e:	a2 01       	movw	r20, r4
    1950:	2a e0       	ldi	r18, 0x0A	; 10
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__ultoa_invert>
    1958:	d8 2e       	mov	r13, r24
    195a:	d4 18       	sub	r13, r4
    195c:	3f c0       	rjmp	.+126    	; 0x19dc <vfprintf+0x2ae>
    195e:	85 37       	cpi	r24, 0x75	; 117
    1960:	21 f4       	brne	.+8      	; 0x196a <vfprintf+0x23c>
    1962:	1f 7e       	andi	r17, 0xEF	; 239
    1964:	2a e0       	ldi	r18, 0x0A	; 10
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	20 c0       	rjmp	.+64     	; 0x19aa <vfprintf+0x27c>
    196a:	19 7f       	andi	r17, 0xF9	; 249
    196c:	8f 36       	cpi	r24, 0x6F	; 111
    196e:	a9 f0       	breq	.+42     	; 0x199a <vfprintf+0x26c>
    1970:	80 37       	cpi	r24, 0x70	; 112
    1972:	20 f4       	brcc	.+8      	; 0x197c <vfprintf+0x24e>
    1974:	88 35       	cpi	r24, 0x58	; 88
    1976:	09 f0       	breq	.+2      	; 0x197a <vfprintf+0x24c>
    1978:	ae c0       	rjmp	.+348    	; 0x1ad6 <vfprintf+0x3a8>
    197a:	0b c0       	rjmp	.+22     	; 0x1992 <vfprintf+0x264>
    197c:	80 37       	cpi	r24, 0x70	; 112
    197e:	21 f0       	breq	.+8      	; 0x1988 <vfprintf+0x25a>
    1980:	88 37       	cpi	r24, 0x78	; 120
    1982:	09 f0       	breq	.+2      	; 0x1986 <vfprintf+0x258>
    1984:	a8 c0       	rjmp	.+336    	; 0x1ad6 <vfprintf+0x3a8>
    1986:	01 c0       	rjmp	.+2      	; 0x198a <vfprintf+0x25c>
    1988:	10 61       	ori	r17, 0x10	; 16
    198a:	14 ff       	sbrs	r17, 4
    198c:	09 c0       	rjmp	.+18     	; 0x19a0 <vfprintf+0x272>
    198e:	14 60       	ori	r17, 0x04	; 4
    1990:	07 c0       	rjmp	.+14     	; 0x19a0 <vfprintf+0x272>
    1992:	14 ff       	sbrs	r17, 4
    1994:	08 c0       	rjmp	.+16     	; 0x19a6 <vfprintf+0x278>
    1996:	16 60       	ori	r17, 0x06	; 6
    1998:	06 c0       	rjmp	.+12     	; 0x19a6 <vfprintf+0x278>
    199a:	28 e0       	ldi	r18, 0x08	; 8
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	05 c0       	rjmp	.+10     	; 0x19aa <vfprintf+0x27c>
    19a0:	20 e1       	ldi	r18, 0x10	; 16
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <vfprintf+0x27c>
    19a6:	20 e1       	ldi	r18, 0x10	; 16
    19a8:	32 e0       	ldi	r19, 0x02	; 2
    19aa:	f5 01       	movw	r30, r10
    19ac:	17 ff       	sbrs	r17, 7
    19ae:	07 c0       	rjmp	.+14     	; 0x19be <vfprintf+0x290>
    19b0:	60 81       	ld	r22, Z
    19b2:	71 81       	ldd	r23, Z+1	; 0x01
    19b4:	82 81       	ldd	r24, Z+2	; 0x02
    19b6:	93 81       	ldd	r25, Z+3	; 0x03
    19b8:	44 e0       	ldi	r20, 0x04	; 4
    19ba:	50 e0       	ldi	r21, 0x00	; 0
    19bc:	06 c0       	rjmp	.+12     	; 0x19ca <vfprintf+0x29c>
    19be:	60 81       	ld	r22, Z
    19c0:	71 81       	ldd	r23, Z+1	; 0x01
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	42 e0       	ldi	r20, 0x02	; 2
    19c8:	50 e0       	ldi	r21, 0x00	; 0
    19ca:	a4 0e       	add	r10, r20
    19cc:	b5 1e       	adc	r11, r21
    19ce:	a2 01       	movw	r20, r4
    19d0:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__ultoa_invert>
    19d4:	d8 2e       	mov	r13, r24
    19d6:	d4 18       	sub	r13, r4
    19d8:	01 2f       	mov	r16, r17
    19da:	0f 77       	andi	r16, 0x7F	; 127
    19dc:	06 ff       	sbrs	r16, 6
    19de:	09 c0       	rjmp	.+18     	; 0x19f2 <vfprintf+0x2c4>
    19e0:	0e 7f       	andi	r16, 0xFE	; 254
    19e2:	df 14       	cp	r13, r15
    19e4:	30 f4       	brcc	.+12     	; 0x19f2 <vfprintf+0x2c4>
    19e6:	04 ff       	sbrs	r16, 4
    19e8:	06 c0       	rjmp	.+12     	; 0x19f6 <vfprintf+0x2c8>
    19ea:	02 fd       	sbrc	r16, 2
    19ec:	04 c0       	rjmp	.+8      	; 0x19f6 <vfprintf+0x2c8>
    19ee:	0f 7e       	andi	r16, 0xEF	; 239
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <vfprintf+0x2c8>
    19f2:	1d 2d       	mov	r17, r13
    19f4:	01 c0       	rjmp	.+2      	; 0x19f8 <vfprintf+0x2ca>
    19f6:	1f 2d       	mov	r17, r15
    19f8:	80 2f       	mov	r24, r16
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	04 ff       	sbrs	r16, 4
    19fe:	0c c0       	rjmp	.+24     	; 0x1a18 <vfprintf+0x2ea>
    1a00:	fe 01       	movw	r30, r28
    1a02:	ed 0d       	add	r30, r13
    1a04:	f1 1d       	adc	r31, r1
    1a06:	20 81       	ld	r18, Z
    1a08:	20 33       	cpi	r18, 0x30	; 48
    1a0a:	11 f4       	brne	.+4      	; 0x1a10 <vfprintf+0x2e2>
    1a0c:	09 7e       	andi	r16, 0xE9	; 233
    1a0e:	09 c0       	rjmp	.+18     	; 0x1a22 <vfprintf+0x2f4>
    1a10:	02 ff       	sbrs	r16, 2
    1a12:	06 c0       	rjmp	.+12     	; 0x1a20 <vfprintf+0x2f2>
    1a14:	1e 5f       	subi	r17, 0xFE	; 254
    1a16:	05 c0       	rjmp	.+10     	; 0x1a22 <vfprintf+0x2f4>
    1a18:	86 78       	andi	r24, 0x86	; 134
    1a1a:	90 70       	andi	r25, 0x00	; 0
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	09 f0       	breq	.+2      	; 0x1a22 <vfprintf+0x2f4>
    1a20:	1f 5f       	subi	r17, 0xFF	; 255
    1a22:	80 2e       	mov	r8, r16
    1a24:	99 24       	eor	r9, r9
    1a26:	03 fd       	sbrc	r16, 3
    1a28:	12 c0       	rjmp	.+36     	; 0x1a4e <vfprintf+0x320>
    1a2a:	00 ff       	sbrs	r16, 0
    1a2c:	0d c0       	rjmp	.+26     	; 0x1a48 <vfprintf+0x31a>
    1a2e:	fd 2c       	mov	r15, r13
    1a30:	1e 15       	cp	r17, r14
    1a32:	50 f4       	brcc	.+20     	; 0x1a48 <vfprintf+0x31a>
    1a34:	fe 0c       	add	r15, r14
    1a36:	f1 1a       	sub	r15, r17
    1a38:	1e 2d       	mov	r17, r14
    1a3a:	06 c0       	rjmp	.+12     	; 0x1a48 <vfprintf+0x31a>
    1a3c:	80 e2       	ldi	r24, 0x20	; 32
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	b3 01       	movw	r22, r6
    1a42:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <fputc>
    1a46:	1f 5f       	subi	r17, 0xFF	; 255
    1a48:	1e 15       	cp	r17, r14
    1a4a:	c0 f3       	brcs	.-16     	; 0x1a3c <vfprintf+0x30e>
    1a4c:	04 c0       	rjmp	.+8      	; 0x1a56 <vfprintf+0x328>
    1a4e:	1e 15       	cp	r17, r14
    1a50:	10 f4       	brcc	.+4      	; 0x1a56 <vfprintf+0x328>
    1a52:	e1 1a       	sub	r14, r17
    1a54:	01 c0       	rjmp	.+2      	; 0x1a58 <vfprintf+0x32a>
    1a56:	ee 24       	eor	r14, r14
    1a58:	84 fe       	sbrs	r8, 4
    1a5a:	0f c0       	rjmp	.+30     	; 0x1a7a <vfprintf+0x34c>
    1a5c:	80 e3       	ldi	r24, 0x30	; 48
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	b3 01       	movw	r22, r6
    1a62:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <fputc>
    1a66:	82 fe       	sbrs	r8, 2
    1a68:	1f c0       	rjmp	.+62     	; 0x1aa8 <vfprintf+0x37a>
    1a6a:	81 fe       	sbrs	r8, 1
    1a6c:	03 c0       	rjmp	.+6      	; 0x1a74 <vfprintf+0x346>
    1a6e:	88 e5       	ldi	r24, 0x58	; 88
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	10 c0       	rjmp	.+32     	; 0x1a94 <vfprintf+0x366>
    1a74:	88 e7       	ldi	r24, 0x78	; 120
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	0d c0       	rjmp	.+26     	; 0x1a94 <vfprintf+0x366>
    1a7a:	c4 01       	movw	r24, r8
    1a7c:	86 78       	andi	r24, 0x86	; 134
    1a7e:	90 70       	andi	r25, 0x00	; 0
    1a80:	00 97       	sbiw	r24, 0x00	; 0
    1a82:	91 f0       	breq	.+36     	; 0x1aa8 <vfprintf+0x37a>
    1a84:	81 fc       	sbrc	r8, 1
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <vfprintf+0x35e>
    1a88:	80 e2       	ldi	r24, 0x20	; 32
    1a8a:	01 c0       	rjmp	.+2      	; 0x1a8e <vfprintf+0x360>
    1a8c:	8b e2       	ldi	r24, 0x2B	; 43
    1a8e:	07 fd       	sbrc	r16, 7
    1a90:	8d e2       	ldi	r24, 0x2D	; 45
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	b3 01       	movw	r22, r6
    1a96:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <fputc>
    1a9a:	06 c0       	rjmp	.+12     	; 0x1aa8 <vfprintf+0x37a>
    1a9c:	80 e3       	ldi	r24, 0x30	; 48
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	b3 01       	movw	r22, r6
    1aa2:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <fputc>
    1aa6:	fa 94       	dec	r15
    1aa8:	df 14       	cp	r13, r15
    1aaa:	c0 f3       	brcs	.-16     	; 0x1a9c <vfprintf+0x36e>
    1aac:	da 94       	dec	r13
    1aae:	f2 01       	movw	r30, r4
    1ab0:	ed 0d       	add	r30, r13
    1ab2:	f1 1d       	adc	r31, r1
    1ab4:	80 81       	ld	r24, Z
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	b3 01       	movw	r22, r6
    1aba:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <fputc>
    1abe:	dd 20       	and	r13, r13
    1ac0:	a9 f7       	brne	.-22     	; 0x1aac <vfprintf+0x37e>
    1ac2:	06 c0       	rjmp	.+12     	; 0x1ad0 <vfprintf+0x3a2>
    1ac4:	80 e2       	ldi	r24, 0x20	; 32
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	b3 01       	movw	r22, r6
    1aca:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <fputc>
    1ace:	ea 94       	dec	r14
    1ad0:	ee 20       	and	r14, r14
    1ad2:	c1 f7       	brne	.-16     	; 0x1ac4 <vfprintf+0x396>
    1ad4:	40 ce       	rjmp	.-896    	; 0x1756 <vfprintf+0x28>
    1ad6:	f3 01       	movw	r30, r6
    1ad8:	86 81       	ldd	r24, Z+6	; 0x06
    1ada:	97 81       	ldd	r25, Z+7	; 0x07
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <vfprintf+0x3b4>
    1ade:	8f ef       	ldi	r24, 0xFF	; 255
    1ae0:	9f ef       	ldi	r25, 0xFF	; 255
    1ae2:	2d 96       	adiw	r28, 0x0d	; 13
    1ae4:	e2 e1       	ldi	r30, 0x12	; 18
    1ae6:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__epilogue_restores__>

00001aea <strnlen_P>:
    1aea:	fc 01       	movw	r30, r24
    1aec:	05 90       	lpm	r0, Z+
    1aee:	61 50       	subi	r22, 0x01	; 1
    1af0:	70 40       	sbci	r23, 0x00	; 0
    1af2:	01 10       	cpse	r0, r1
    1af4:	d8 f7       	brcc	.-10     	; 0x1aec <strnlen_P+0x2>
    1af6:	80 95       	com	r24
    1af8:	90 95       	com	r25
    1afa:	8e 0f       	add	r24, r30
    1afc:	9f 1f       	adc	r25, r31
    1afe:	08 95       	ret

00001b00 <strnlen>:
    1b00:	fc 01       	movw	r30, r24
    1b02:	61 50       	subi	r22, 0x01	; 1
    1b04:	70 40       	sbci	r23, 0x00	; 0
    1b06:	01 90       	ld	r0, Z+
    1b08:	01 10       	cpse	r0, r1
    1b0a:	d8 f7       	brcc	.-10     	; 0x1b02 <strnlen+0x2>
    1b0c:	80 95       	com	r24
    1b0e:	90 95       	com	r25
    1b10:	8e 0f       	add	r24, r30
    1b12:	9f 1f       	adc	r25, r31
    1b14:	08 95       	ret

00001b16 <fputc>:
    1b16:	0f 93       	push	r16
    1b18:	1f 93       	push	r17
    1b1a:	cf 93       	push	r28
    1b1c:	df 93       	push	r29
    1b1e:	8c 01       	movw	r16, r24
    1b20:	eb 01       	movw	r28, r22
    1b22:	8b 81       	ldd	r24, Y+3	; 0x03
    1b24:	81 ff       	sbrs	r24, 1
    1b26:	1b c0       	rjmp	.+54     	; 0x1b5e <fputc+0x48>
    1b28:	82 ff       	sbrs	r24, 2
    1b2a:	0d c0       	rjmp	.+26     	; 0x1b46 <fputc+0x30>
    1b2c:	2e 81       	ldd	r18, Y+6	; 0x06
    1b2e:	3f 81       	ldd	r19, Y+7	; 0x07
    1b30:	8c 81       	ldd	r24, Y+4	; 0x04
    1b32:	9d 81       	ldd	r25, Y+5	; 0x05
    1b34:	28 17       	cp	r18, r24
    1b36:	39 07       	cpc	r19, r25
    1b38:	64 f4       	brge	.+24     	; 0x1b52 <fputc+0x3c>
    1b3a:	e8 81       	ld	r30, Y
    1b3c:	f9 81       	ldd	r31, Y+1	; 0x01
    1b3e:	01 93       	st	Z+, r16
    1b40:	f9 83       	std	Y+1, r31	; 0x01
    1b42:	e8 83       	st	Y, r30
    1b44:	06 c0       	rjmp	.+12     	; 0x1b52 <fputc+0x3c>
    1b46:	e8 85       	ldd	r30, Y+8	; 0x08
    1b48:	f9 85       	ldd	r31, Y+9	; 0x09
    1b4a:	80 2f       	mov	r24, r16
    1b4c:	09 95       	icall
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	31 f4       	brne	.+12     	; 0x1b5e <fputc+0x48>
    1b52:	8e 81       	ldd	r24, Y+6	; 0x06
    1b54:	9f 81       	ldd	r25, Y+7	; 0x07
    1b56:	01 96       	adiw	r24, 0x01	; 1
    1b58:	9f 83       	std	Y+7, r25	; 0x07
    1b5a:	8e 83       	std	Y+6, r24	; 0x06
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <fputc+0x4c>
    1b5e:	0f ef       	ldi	r16, 0xFF	; 255
    1b60:	1f ef       	ldi	r17, 0xFF	; 255
    1b62:	c8 01       	movw	r24, r16
    1b64:	df 91       	pop	r29
    1b66:	cf 91       	pop	r28
    1b68:	1f 91       	pop	r17
    1b6a:	0f 91       	pop	r16
    1b6c:	08 95       	ret

00001b6e <__ultoa_invert>:
    1b6e:	fa 01       	movw	r30, r20
    1b70:	aa 27       	eor	r26, r26
    1b72:	28 30       	cpi	r18, 0x08	; 8
    1b74:	51 f1       	breq	.+84     	; 0x1bca <__ultoa_invert+0x5c>
    1b76:	20 31       	cpi	r18, 0x10	; 16
    1b78:	81 f1       	breq	.+96     	; 0x1bda <__ultoa_invert+0x6c>
    1b7a:	e8 94       	clt
    1b7c:	6f 93       	push	r22
    1b7e:	6e 7f       	andi	r22, 0xFE	; 254
    1b80:	6e 5f       	subi	r22, 0xFE	; 254
    1b82:	7f 4f       	sbci	r23, 0xFF	; 255
    1b84:	8f 4f       	sbci	r24, 0xFF	; 255
    1b86:	9f 4f       	sbci	r25, 0xFF	; 255
    1b88:	af 4f       	sbci	r26, 0xFF	; 255
    1b8a:	b1 e0       	ldi	r27, 0x01	; 1
    1b8c:	3e d0       	rcall	.+124    	; 0x1c0a <__ultoa_invert+0x9c>
    1b8e:	b4 e0       	ldi	r27, 0x04	; 4
    1b90:	3c d0       	rcall	.+120    	; 0x1c0a <__ultoa_invert+0x9c>
    1b92:	67 0f       	add	r22, r23
    1b94:	78 1f       	adc	r23, r24
    1b96:	89 1f       	adc	r24, r25
    1b98:	9a 1f       	adc	r25, r26
    1b9a:	a1 1d       	adc	r26, r1
    1b9c:	68 0f       	add	r22, r24
    1b9e:	79 1f       	adc	r23, r25
    1ba0:	8a 1f       	adc	r24, r26
    1ba2:	91 1d       	adc	r25, r1
    1ba4:	a1 1d       	adc	r26, r1
    1ba6:	6a 0f       	add	r22, r26
    1ba8:	71 1d       	adc	r23, r1
    1baa:	81 1d       	adc	r24, r1
    1bac:	91 1d       	adc	r25, r1
    1bae:	a1 1d       	adc	r26, r1
    1bb0:	20 d0       	rcall	.+64     	; 0x1bf2 <__ultoa_invert+0x84>
    1bb2:	09 f4       	brne	.+2      	; 0x1bb6 <__ultoa_invert+0x48>
    1bb4:	68 94       	set
    1bb6:	3f 91       	pop	r19
    1bb8:	2a e0       	ldi	r18, 0x0A	; 10
    1bba:	26 9f       	mul	r18, r22
    1bbc:	11 24       	eor	r1, r1
    1bbe:	30 19       	sub	r19, r0
    1bc0:	30 5d       	subi	r19, 0xD0	; 208
    1bc2:	31 93       	st	Z+, r19
    1bc4:	de f6       	brtc	.-74     	; 0x1b7c <__ultoa_invert+0xe>
    1bc6:	cf 01       	movw	r24, r30
    1bc8:	08 95       	ret
    1bca:	46 2f       	mov	r20, r22
    1bcc:	47 70       	andi	r20, 0x07	; 7
    1bce:	40 5d       	subi	r20, 0xD0	; 208
    1bd0:	41 93       	st	Z+, r20
    1bd2:	b3 e0       	ldi	r27, 0x03	; 3
    1bd4:	0f d0       	rcall	.+30     	; 0x1bf4 <__ultoa_invert+0x86>
    1bd6:	c9 f7       	brne	.-14     	; 0x1bca <__ultoa_invert+0x5c>
    1bd8:	f6 cf       	rjmp	.-20     	; 0x1bc6 <__ultoa_invert+0x58>
    1bda:	46 2f       	mov	r20, r22
    1bdc:	4f 70       	andi	r20, 0x0F	; 15
    1bde:	40 5d       	subi	r20, 0xD0	; 208
    1be0:	4a 33       	cpi	r20, 0x3A	; 58
    1be2:	18 f0       	brcs	.+6      	; 0x1bea <__ultoa_invert+0x7c>
    1be4:	49 5d       	subi	r20, 0xD9	; 217
    1be6:	31 fd       	sbrc	r19, 1
    1be8:	40 52       	subi	r20, 0x20	; 32
    1bea:	41 93       	st	Z+, r20
    1bec:	02 d0       	rcall	.+4      	; 0x1bf2 <__ultoa_invert+0x84>
    1bee:	a9 f7       	brne	.-22     	; 0x1bda <__ultoa_invert+0x6c>
    1bf0:	ea cf       	rjmp	.-44     	; 0x1bc6 <__ultoa_invert+0x58>
    1bf2:	b4 e0       	ldi	r27, 0x04	; 4
    1bf4:	a6 95       	lsr	r26
    1bf6:	97 95       	ror	r25
    1bf8:	87 95       	ror	r24
    1bfa:	77 95       	ror	r23
    1bfc:	67 95       	ror	r22
    1bfe:	ba 95       	dec	r27
    1c00:	c9 f7       	brne	.-14     	; 0x1bf4 <__ultoa_invert+0x86>
    1c02:	00 97       	sbiw	r24, 0x00	; 0
    1c04:	61 05       	cpc	r22, r1
    1c06:	71 05       	cpc	r23, r1
    1c08:	08 95       	ret
    1c0a:	9b 01       	movw	r18, r22
    1c0c:	ac 01       	movw	r20, r24
    1c0e:	0a 2e       	mov	r0, r26
    1c10:	06 94       	lsr	r0
    1c12:	57 95       	ror	r21
    1c14:	47 95       	ror	r20
    1c16:	37 95       	ror	r19
    1c18:	27 95       	ror	r18
    1c1a:	ba 95       	dec	r27
    1c1c:	c9 f7       	brne	.-14     	; 0x1c10 <__ultoa_invert+0xa2>
    1c1e:	62 0f       	add	r22, r18
    1c20:	73 1f       	adc	r23, r19
    1c22:	84 1f       	adc	r24, r20
    1c24:	95 1f       	adc	r25, r21
    1c26:	a0 1d       	adc	r26, r0
    1c28:	08 95       	ret

00001c2a <__prologue_saves__>:
    1c2a:	2f 92       	push	r2
    1c2c:	3f 92       	push	r3
    1c2e:	4f 92       	push	r4
    1c30:	5f 92       	push	r5
    1c32:	6f 92       	push	r6
    1c34:	7f 92       	push	r7
    1c36:	8f 92       	push	r8
    1c38:	9f 92       	push	r9
    1c3a:	af 92       	push	r10
    1c3c:	bf 92       	push	r11
    1c3e:	cf 92       	push	r12
    1c40:	df 92       	push	r13
    1c42:	ef 92       	push	r14
    1c44:	ff 92       	push	r15
    1c46:	0f 93       	push	r16
    1c48:	1f 93       	push	r17
    1c4a:	cf 93       	push	r28
    1c4c:	df 93       	push	r29
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
    1c52:	ca 1b       	sub	r28, r26
    1c54:	db 0b       	sbc	r29, r27
    1c56:	0f b6       	in	r0, 0x3f	; 63
    1c58:	f8 94       	cli
    1c5a:	de bf       	out	0x3e, r29	; 62
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	cd bf       	out	0x3d, r28	; 61
    1c60:	09 94       	ijmp

00001c62 <__epilogue_restores__>:
    1c62:	2a 88       	ldd	r2, Y+18	; 0x12
    1c64:	39 88       	ldd	r3, Y+17	; 0x11
    1c66:	48 88       	ldd	r4, Y+16	; 0x10
    1c68:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c6a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c6c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c6e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c70:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c72:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c74:	b9 84       	ldd	r11, Y+9	; 0x09
    1c76:	c8 84       	ldd	r12, Y+8	; 0x08
    1c78:	df 80       	ldd	r13, Y+7	; 0x07
    1c7a:	ee 80       	ldd	r14, Y+6	; 0x06
    1c7c:	fd 80       	ldd	r15, Y+5	; 0x05
    1c7e:	0c 81       	ldd	r16, Y+4	; 0x04
    1c80:	1b 81       	ldd	r17, Y+3	; 0x03
    1c82:	aa 81       	ldd	r26, Y+2	; 0x02
    1c84:	b9 81       	ldd	r27, Y+1	; 0x01
    1c86:	ce 0f       	add	r28, r30
    1c88:	d1 1d       	adc	r29, r1
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	f8 94       	cli
    1c8e:	de bf       	out	0x3e, r29	; 62
    1c90:	0f be       	out	0x3f, r0	; 63
    1c92:	cd bf       	out	0x3d, r28	; 61
    1c94:	ed 01       	movw	r28, r26
    1c96:	08 95       	ret

00001c98 <_exit>:
    1c98:	f8 94       	cli

00001c9a <__stop_program>:
    1c9a:	ff cf       	rjmp	.-2      	; 0x1c9a <__stop_program>
